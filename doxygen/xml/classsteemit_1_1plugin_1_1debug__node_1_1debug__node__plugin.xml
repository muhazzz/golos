<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin" kind="class" language="C++" prot="public">
    <compoundname>steemit::plugin::debug_node::debug_node_plugin</compoundname>
    <basecompoundref refid="classsteemit_1_1app_1_1plugin" prot="public" virt="non-virtual">steemit::app::plugin</basecompoundref>
    <includes refid="debug__node__plugin_8hpp" local="no">debug_node_plugin.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1ad082fdb7ecf2a59890235233259c48e8" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool steemit::plugin::debug_node::debug_node_plugin::logging</definition>
        <argsstring></argsstring>
        <name>logging</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/plugins/debug_node/include/steemit/plugins/debug_node/debug_node_plugin.hpp" line="115" column="1" bodyfile="libraries/plugins/debug_node/include/steemit/plugins/debug_node/debug_node_plugin.hpp" bodystart="115" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1af0177e4c79851f21b8cf0931fd2efe4f" prot="private" static="no" mutable="no">
        <type>std::map&lt; protocol::public_key_type, fc::ecc::private_key &gt;</type>
        <definition>std::map&lt;protocol::public_key_type, fc::ecc::private_key&gt; steemit::plugin::debug_node::debug_node_plugin::_private_keys</definition>
        <argsstring></argsstring>
        <name>_private_keys</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/plugins/debug_node/include/steemit/plugins/debug_node/debug_node_plugin.hpp" line="126" column="1" bodyfile="libraries/plugins/debug_node/include/steemit/plugins/debug_node/debug_node_plugin.hpp" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1a9f1fc1a9661451e078d9af32ec5440a5" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classsteemit_1_1plugin_1_1debug__node_1_1detail_1_1debug__node__plugin__impl" kindref="compound">detail::debug_node_plugin_impl</ref> &gt;</type>
        <definition>std::shared_ptr&lt;detail::debug_node_plugin_impl&gt; steemit::plugin::debug_node::debug_node_plugin::_my</definition>
        <argsstring></argsstring>
        <name>_my</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/plugins/debug_node/include/steemit/plugins/debug_node/debug_node_plugin.hpp" line="128" column="1" bodyfile="libraries/plugins/debug_node/include/steemit/plugins/debug_node/debug_node_plugin.hpp" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1a7d2e90d629e89f24b6102748dd93768e" prot="private" static="no" mutable="no">
        <type>boost::signals2::scoped_connection</type>
        <definition>boost::signals2::scoped_connection steemit::plugin::debug_node::debug_node_plugin::_applied_block_conn</definition>
        <argsstring></argsstring>
        <name>_applied_block_conn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/plugins/debug_node/include/steemit/plugins/debug_node/debug_node_plugin.hpp" line="131" column="1" bodyfile="libraries/plugins/debug_node/include/steemit/plugins/debug_node/debug_node_plugin.hpp" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1a67285c91b06b3c2e2a3d92de4c379ba7" prot="private" static="no" mutable="no">
        <type>boost::signals2::scoped_connection</type>
        <definition>boost::signals2::scoped_connection steemit::plugin::debug_node::debug_node_plugin::_changed_objects_conn</definition>
        <argsstring></argsstring>
        <name>_changed_objects_conn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/plugins/debug_node/include/steemit/plugins/debug_node/debug_node_plugin.hpp" line="132" column="1" bodyfile="libraries/plugins/debug_node/include/steemit/plugins/debug_node/debug_node_plugin.hpp" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1a2e637fe8d4ea498c2c2469d6ec2956bf" prot="private" static="no" mutable="no">
        <type>boost::signals2::scoped_connection</type>
        <definition>boost::signals2::scoped_connection steemit::plugin::debug_node::debug_node_plugin::_removed_objects_conn</definition>
        <argsstring></argsstring>
        <name>_removed_objects_conn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/plugins/debug_node/include/steemit/plugins/debug_node/debug_node_plugin.hpp" line="133" column="1" bodyfile="libraries/plugins/debug_node/include/steemit/plugins/debug_node/debug_node_plugin.hpp" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1a61c338b434838155e5892fb6459b1566" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; steemit::plugin::debug_node::debug_node_plugin::_edit_scripts</definition>
        <argsstring></argsstring>
        <name>_edit_scripts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/plugins/debug_node/include/steemit/plugins/debug_node/debug_node_plugin.hpp" line="135" column="1" bodyfile="libraries/plugins/debug_node/include/steemit/plugins/debug_node/debug_node_plugin.hpp" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1ac84d3452c65099a9143e14784eebc395" prot="private" static="no" mutable="no">
        <type>std::map&lt; protocol::block_id_type, std::vector&lt; std::function&lt; void(<ref refid="classsteemit_1_1chain_1_1database" kindref="compound">chain::database</ref> &amp;)&gt; &gt; &gt;</type>
        <definition>std::map&lt;protocol::block_id_type, std::vector&lt;std::function&lt;void( chain::database &amp; )&gt; &gt; &gt; steemit::plugin::debug_node::debug_node_plugin::_debug_updates</definition>
        <argsstring></argsstring>
        <name>_debug_updates</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/plugins/debug_node/include/steemit/plugins/debug_node/debug_node_plugin.hpp" line="138" column="1" bodyfile="libraries/plugins/debug_node/include/steemit/plugins/debug_node/debug_node_plugin.hpp" bodystart="138" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1a933b555b4eafb5b578a351d02c75749e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>steemit::plugin::debug_node::debug_node_plugin::debug_node_plugin</definition>
        <argsstring>(application *app)</argsstring>
        <name>debug_node_plugin</name>
        <param>
          <type><ref refid="classsteemit_1_1app_1_1application" kindref="compound">application</ref> *</type>
          <declname>app</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/plugins/debug_node/include/steemit/plugins/debug_node/debug_node_plugin.hpp" line="49" column="1" bodyfile="libraries/plugins/debug_node/debug_node_plugin.cpp" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1a280dd911cd92baf51b5c1dcb93106a54" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>steemit::plugin::debug_node::debug_node_plugin::~debug_node_plugin</definition>
        <argsstring>()</argsstring>
        <name>~debug_node_plugin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/plugins/debug_node/include/steemit/plugins/debug_node/debug_node_plugin.hpp" line="51" column="1" bodyfile="libraries/plugins/debug_node/debug_node_plugin.cpp" bodystart="51" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1a0252b24879017e413ebcce5a7c041529" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string steemit::plugin::debug_node::debug_node_plugin::plugin_name</definition>
        <argsstring>() const override</argsstring>
        <name>plugin_name</name>
        <reimplements refid="classsteemit_1_1app_1_1plugin_1a3595f45362d8619b8b720b5afb581896">plugin_name</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/plugins/debug_node/include/steemit/plugins/debug_node/debug_node_plugin.hpp" line="53" column="1" bodyfile="libraries/plugins/debug_node/debug_node_plugin.cpp" bodystart="130" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1a4199c594f749cc2622330a8f53c689a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void steemit::plugin::debug_node::debug_node_plugin::plugin_initialize</definition>
        <argsstring>(const boost::program_options::variables_map &amp;options) override</argsstring>
        <name>plugin_initialize</name>
        <reimplements refid="classsteemit_1_1app_1_1plugin_1a494e06ed857fe0f3e647a8a4c14db07f">plugin_initialize</reimplements>
        <param>
          <type>const boost::program_options::variables_map &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Perform early startup routines and register plugin indexes, callbacks, etc. </para>        </briefdescription>
        <detaileddescription>
<para>Plugins MUST supply a method initialize() which will be called early in the application startup. This method should contain early setup code such as initializing variables, adding indexes to the database, registering callback methods from the database, adding APIs, etc., as well as applying any options in the options map</para><para>This method is called BEFORE the database is open, therefore any routines which require any chain state MUST NOT be called by this method. These routines should be performed in startup() instead.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>The options passed to the application, via configuration files or command line </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/plugins/debug_node/include/steemit/plugins/debug_node/debug_node_plugin.hpp" line="55" column="1" bodyfile="libraries/plugins/debug_node/debug_node_plugin.cpp" bodystart="142" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1a97d73aa88a96bea8edb5b5f1d53228c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void steemit::plugin::debug_node::debug_node_plugin::plugin_set_program_options</definition>
        <argsstring>(boost::program_options::options_description &amp;cli, boost::program_options::options_description &amp;cfg) override</argsstring>
        <name>plugin_set_program_options</name>
        <reimplements refid="classsteemit_1_1app_1_1plugin_1accf40868ee6da23791180bf1bc4e1ca0">plugin_set_program_options</reimplements>
        <param>
          <type>boost::program_options::options_description &amp;</type>
          <declname>command_line_options</declname>
        </param>
        <param>
          <type>boost::program_options::options_description &amp;</type>
          <declname>config_file_options</declname>
        </param>
        <briefdescription>
<para>Fill in command line parameters used by the plugin. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command_line_options</parametername>
</parameternamelist>
<parameterdescription>
<para>All options this plugin supports taking on the command-line </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config_file_options</parametername>
</parameternamelist>
<parameterdescription>
<para>All options this plugin supports storing in a configuration file</para></parameterdescription>
</parameteritem>
</parameterlist>
This method populates its arguments with any command-line and configuration file options the plugin supports. If a plugin does not need these options, it may simply provide an empty implementation of this method. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/plugins/debug_node/include/steemit/plugins/debug_node/debug_node_plugin.hpp" line="57" column="1" bodyfile="libraries/plugins/debug_node/debug_node_plugin.cpp" bodystart="134" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1afd32a0c65300dae1c46e94f2e7b19288" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void steemit::plugin::debug_node::debug_node_plugin::plugin_startup</definition>
        <argsstring>() override</argsstring>
        <name>plugin_startup</name>
        <reimplements refid="classsteemit_1_1app_1_1plugin_1a678b76647b9147d5b0a7e6cee75b380f">plugin_startup</reimplements>
        <briefdescription>
<para>Begin normal runtime operations. </para>        </briefdescription>
        <detaileddescription>
<para>Plugins MUST supply a method startup() which will be called at the end of application startup. This method should contain code which schedules any tasks, or requires chain state. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/plugins/debug_node/include/steemit/plugins/debug_node/debug_node_plugin.hpp" line="61" column="1" bodyfile="libraries/plugins/debug_node/debug_node_plugin.cpp" bodystart="159" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1abc54f5b60870482c14510e3a123167f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void steemit::plugin::debug_node::debug_node_plugin::plugin_shutdown</definition>
        <argsstring>() override</argsstring>
        <name>plugin_shutdown</name>
        <reimplements refid="classsteemit_1_1app_1_1plugin_1a2f948dcff82c67c70dbb45bd229dae68">plugin_shutdown</reimplements>
        <briefdescription>
<para>Cleanly shut down the plugin. </para>        </briefdescription>
        <detaileddescription>
<para>This is called to request a clean shutdown (e.g. due to SIGINT or SIGTERM). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/plugins/debug_node/include/steemit/plugins/debug_node/debug_node_plugin.hpp" line="63" column="1" bodyfile="libraries/plugins/debug_node/debug_node_plugin.cpp" bodystart="418" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1abfe63bcb7aec65a7a9e02abd2395cf01" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Lambda</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void steemit::plugin::debug_node::debug_node_plugin::debug_update</definition>
        <argsstring>(Lambda &amp;&amp;callback, uint32_t skip=steemit::chain::database::skip_nothing)</argsstring>
        <name>debug_update</name>
        <param>
          <type>Lambda &amp;&amp;</type>
          <declname>callback</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>skip</declname>
          <defval><ref refid="classsteemit_1_1chain_1_1database_1afd81b7d9bc2099fda77544ddc53f9dc5addc8b88d20727cbd0fc4a1b37e2cc4ed" kindref="member">steemit::chain::database::skip_nothing</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/plugins/debug_node/include/steemit/plugins/debug_node/debug_node_plugin.hpp" line="66" column="1" bodyfile="libraries/plugins/debug_node/include/steemit/plugins/debug_node/debug_node_plugin.hpp" bodystart="66" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1a874408696afbcbec817aabdb98abec29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t steemit::plugin::debug_node::debug_node_plugin::debug_generate_blocks</definition>
        <argsstring>(const std::string &amp;debug_key, uint32_t count, uint32_t skip=steemit::chain::database::skip_nothing, uint32_t miss_blocks=0, private_key_storage *key_storage=nullptr)</argsstring>
        <name>debug_generate_blocks</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>debug_key</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>skip</declname>
          <defval><ref refid="classsteemit_1_1chain_1_1database_1afd81b7d9bc2099fda77544ddc53f9dc5addc8b88d20727cbd0fc4a1b37e2cc4ed" kindref="member">steemit::chain::database::skip_nothing</ref></defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>miss_blocks</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classsteemit_1_1plugin_1_1debug__node_1_1private__key__storage" kindref="compound">private_key_storage</ref> *</type>
          <declname>key_storage</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/plugins/debug_node/include/steemit/plugins/debug_node/debug_node_plugin.hpp" line="86" column="1" bodyfile="libraries/plugins/debug_node/debug_node_plugin.cpp" bodystart="268" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1abd5bf85f6859a91f6315bf51336439d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t steemit::plugin::debug_node::debug_node_plugin::debug_generate_blocks_until</definition>
        <argsstring>(const std::string &amp;debug_key, const fc::time_point_sec &amp;head_block_time, bool generate_sparsely, uint32_t skip=steemit::chain::database::skip_nothing, private_key_storage *key_storage=nullptr)</argsstring>
        <name>debug_generate_blocks_until</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>debug_key</declname>
        </param>
        <param>
          <type>const fc::time_point_sec &amp;</type>
          <declname>head_block_time</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>generate_sparsely</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>skip</declname>
          <defval><ref refid="classsteemit_1_1chain_1_1database_1afd81b7d9bc2099fda77544ddc53f9dc5addc8b88d20727cbd0fc4a1b37e2cc4ed" kindref="member">steemit::chain::database::skip_nothing</ref></defval>
        </param>
        <param>
          <type><ref refid="classsteemit_1_1plugin_1_1debug__node_1_1private__key__storage" kindref="compound">private_key_storage</ref> *</type>
          <declname>key_storage</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/plugins/debug_node/include/steemit/plugins/debug_node/debug_node_plugin.hpp" line="94" column="1" bodyfile="libraries/plugins/debug_node/debug_node_plugin.cpp" bodystart="327" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1a34c1bd75c40270041c8c17804f235eac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::plugin::debug_node::debug_node_plugin::set_json_object_stream</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>set_json_object_stream</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/plugins/debug_node/include/steemit/plugins/debug_node/debug_node_plugin.hpp" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1ab60272865b4196f4cbf4dfa8c20ed77c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::plugin::debug_node::debug_node_plugin::flush_json_object_stream</definition>
        <argsstring>()</argsstring>
        <name>flush_json_object_stream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/plugins/debug_node/include/steemit/plugins/debug_node/debug_node_plugin.hpp" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1a9be4d6a35df72a56caa0c5b84258a3e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::plugin::debug_node::debug_node_plugin::save_debug_updates</definition>
        <argsstring>(fc::mutable_variant_object &amp;target)</argsstring>
        <name>save_debug_updates</name>
        <param>
          <type>fc::mutable_variant_object &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/plugins/debug_node/include/steemit/plugins/debug_node/debug_node_plugin.hpp" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1a6aac5d7aba32076aa5c0f329b3a0bbd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::plugin::debug_node::debug_node_plugin::load_debug_updates</definition>
        <argsstring>(const fc::variant_object &amp;target)</argsstring>
        <name>load_debug_updates</name>
        <param>
          <type>const fc::variant_object &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/plugins/debug_node/include/steemit/plugins/debug_node/debug_node_plugin.hpp" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1a7b2d3a9a49ca04e25c26225dde1e94b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::plugin::debug_node::debug_node_plugin::debug_mine_work</definition>
        <argsstring>(chain::pow2 &amp;work, uint32_t summary_target)</argsstring>
        <name>debug_mine_work</name>
        <param>
          <type>chain::pow2 &amp;</type>
          <declname>work</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>summary_target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/plugins/debug_node/include/steemit/plugins/debug_node/debug_node_plugin.hpp" line="110" column="1" bodyfile="libraries/plugins/debug_node/debug_node_plugin.cpp" bodystart="72" bodyend="128"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1aafd26646c0ecc080a0214c653508c1c8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::plugin::debug_node::debug_node_plugin::on_changed_objects</definition>
        <argsstring>(const std::vector&lt; graphene::db::object_id_type &gt; &amp;ids)</argsstring>
        <name>on_changed_objects</name>
        <param>
          <type>const std::vector&lt; graphene::db::object_id_type &gt; &amp;</type>
          <declname>ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/plugins/debug_node/include/steemit/plugins/debug_node/debug_node_plugin.hpp" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1a2c6096bf14157fb929769f74ae76e9ee" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::plugin::debug_node::debug_node_plugin::on_removed_objects</definition>
        <argsstring>(const std::vector&lt; const graphene::db::object *&gt; objs)</argsstring>
        <name>on_removed_objects</name>
        <param>
          <type>const std::vector&lt; const graphene::db::object *&gt;</type>
          <declname>objs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/plugins/debug_node/include/steemit/plugins/debug_node/debug_node_plugin.hpp" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1af15487129322d43fd9394b508c7b6f16" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::plugin::debug_node::debug_node_plugin::on_applied_block</definition>
        <argsstring>(const protocol::signed_block &amp;b)</argsstring>
        <name>on_applied_block</name>
        <param>
          <type>const protocol::signed_block &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/plugins/debug_node/include/steemit/plugins/debug_node/debug_node_plugin.hpp" line="122" column="1" bodyfile="libraries/plugins/debug_node/debug_node_plugin.cpp" bodystart="373" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1a4f23ab7ece452d45ce62143e5a8c53e6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::plugin::debug_node::debug_node_plugin::apply_debug_updates</definition>
        <argsstring>()</argsstring>
        <name>apply_debug_updates</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/plugins/debug_node/include/steemit/plugins/debug_node/debug_node_plugin.hpp" line="124" column="1" bodyfile="libraries/plugins/debug_node/debug_node_plugin.cpp" bodystart="358" bodyend="371"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="405">
        <label>steemit::app::abstract_plugin</label>
        <link refid="classsteemit_1_1app_1_1abstract__plugin"/>
      </node>
      <node id="404">
        <label>steemit::app::plugin</label>
        <link refid="classsteemit_1_1app_1_1plugin"/>
        <childnode refid="405" relation="public-inheritance">
        </childnode>
      </node>
      <node id="403">
        <label>steemit::plugin::debug_node::debug_node_plugin</label>
        <link refid="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin"/>
        <childnode refid="404" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="408">
        <label>steemit::app::abstract_plugin</label>
        <link refid="classsteemit_1_1app_1_1abstract__plugin"/>
      </node>
      <node id="407">
        <label>steemit::app::plugin</label>
        <link refid="classsteemit_1_1app_1_1plugin"/>
        <childnode refid="408" relation="public-inheritance">
        </childnode>
      </node>
      <node id="406">
        <label>steemit::plugin::debug_node::debug_node_plugin</label>
        <link refid="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin"/>
        <childnode refid="407" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="libraries/plugins/debug_node/include/steemit/plugins/debug_node/debug_node_plugin.hpp" line="47" column="1" bodyfile="libraries/plugins/debug_node/include/steemit/plugins/debug_node/debug_node_plugin.hpp" bodystart="47" bodyend="139"/>
    <listofallmembers>
      <member refid="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1a7d2e90d629e89f24b6102748dd93768e" prot="private" virt="non-virtual"><scope>steemit::plugin::debug_node::debug_node_plugin</scope><name>_applied_block_conn</name></member>
      <member refid="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1a67285c91b06b3c2e2a3d92de4c379ba7" prot="private" virt="non-virtual"><scope>steemit::plugin::debug_node::debug_node_plugin</scope><name>_changed_objects_conn</name></member>
      <member refid="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1ac84d3452c65099a9143e14784eebc395" prot="private" virt="non-virtual"><scope>steemit::plugin::debug_node::debug_node_plugin</scope><name>_debug_updates</name></member>
      <member refid="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1a61c338b434838155e5892fb6459b1566" prot="private" virt="non-virtual"><scope>steemit::plugin::debug_node::debug_node_plugin</scope><name>_edit_scripts</name></member>
      <member refid="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1a9f1fc1a9661451e078d9af32ec5440a5" prot="private" virt="non-virtual"><scope>steemit::plugin::debug_node::debug_node_plugin</scope><name>_my</name></member>
      <member refid="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1af0177e4c79851f21b8cf0931fd2efe4f" prot="private" virt="non-virtual"><scope>steemit::plugin::debug_node::debug_node_plugin</scope><name>_private_keys</name></member>
      <member refid="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1a2e637fe8d4ea498c2c2469d6ec2956bf" prot="private" virt="non-virtual"><scope>steemit::plugin::debug_node::debug_node_plugin</scope><name>_removed_objects_conn</name></member>
      <member refid="classsteemit_1_1app_1_1plugin_1a64dbd02f97410a3678dbe9c2a4c92c70" prot="public" virt="non-virtual"><scope>steemit::plugin::debug_node::debug_node_plugin</scope><name>app</name></member>
      <member refid="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1a4f23ab7ece452d45ce62143e5a8c53e6" prot="private" virt="non-virtual"><scope>steemit::plugin::debug_node::debug_node_plugin</scope><name>apply_debug_updates</name></member>
      <member refid="classsteemit_1_1app_1_1plugin_1adb0c1063347f4911e9a815c32058c2a9" prot="public" virt="non-virtual"><scope>steemit::plugin::debug_node::debug_node_plugin</scope><name>database</name></member>
      <member refid="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1a874408696afbcbec817aabdb98abec29" prot="public" virt="non-virtual"><scope>steemit::plugin::debug_node::debug_node_plugin</scope><name>debug_generate_blocks</name></member>
      <member refid="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1abd5bf85f6859a91f6315bf51336439d5" prot="public" virt="non-virtual"><scope>steemit::plugin::debug_node::debug_node_plugin</scope><name>debug_generate_blocks_until</name></member>
      <member refid="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1a7b2d3a9a49ca04e25c26225dde1e94b1" prot="public" virt="non-virtual"><scope>steemit::plugin::debug_node::debug_node_plugin</scope><name>debug_mine_work</name></member>
      <member refid="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1a933b555b4eafb5b578a351d02c75749e" prot="public" virt="non-virtual"><scope>steemit::plugin::debug_node::debug_node_plugin</scope><name>debug_node_plugin</name></member>
      <member refid="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1abfe63bcb7aec65a7a9e02abd2395cf01" prot="public" virt="non-virtual"><scope>steemit::plugin::debug_node::debug_node_plugin</scope><name>debug_update</name></member>
      <member refid="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1ab60272865b4196f4cbf4dfa8c20ed77c" prot="public" virt="non-virtual"><scope>steemit::plugin::debug_node::debug_node_plugin</scope><name>flush_json_object_stream</name></member>
      <member refid="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1a6aac5d7aba32076aa5c0f329b3a0bbd5" prot="public" virt="non-virtual"><scope>steemit::plugin::debug_node::debug_node_plugin</scope><name>load_debug_updates</name></member>
      <member refid="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1ad082fdb7ecf2a59890235233259c48e8" prot="public" virt="non-virtual"><scope>steemit::plugin::debug_node::debug_node_plugin</scope><name>logging</name></member>
      <member refid="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1af15487129322d43fd9394b508c7b6f16" prot="private" virt="non-virtual"><scope>steemit::plugin::debug_node::debug_node_plugin</scope><name>on_applied_block</name></member>
      <member refid="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1aafd26646c0ecc080a0214c653508c1c8" prot="private" virt="non-virtual"><scope>steemit::plugin::debug_node::debug_node_plugin</scope><name>on_changed_objects</name></member>
      <member refid="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1a2c6096bf14157fb929769f74ae76e9ee" prot="private" virt="non-virtual"><scope>steemit::plugin::debug_node::debug_node_plugin</scope><name>on_removed_objects</name></member>
      <member refid="classsteemit_1_1app_1_1plugin_1a48688211086fc8426bcdb587de263ef6" prot="protected" virt="non-virtual"><scope>steemit::plugin::debug_node::debug_node_plugin</scope><name>p2p_node</name></member>
      <member refid="classsteemit_1_1app_1_1plugin_1aad2d44e69837f6f1ef3b840842034cdd" prot="public" virt="non-virtual"><scope>steemit::plugin::debug_node::debug_node_plugin</scope><name>plugin</name></member>
      <member refid="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1a4199c594f749cc2622330a8f53c689a7" prot="public" virt="virtual"><scope>steemit::plugin::debug_node::debug_node_plugin</scope><name>plugin_initialize</name></member>
      <member refid="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1a0252b24879017e413ebcce5a7c041529" prot="public" virt="virtual"><scope>steemit::plugin::debug_node::debug_node_plugin</scope><name>plugin_name</name></member>
      <member refid="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1a97d73aa88a96bea8edb5b5f1d53228c3" prot="public" virt="virtual"><scope>steemit::plugin::debug_node::debug_node_plugin</scope><name>plugin_set_program_options</name></member>
      <member refid="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1abc54f5b60870482c14510e3a123167f2" prot="public" virt="virtual"><scope>steemit::plugin::debug_node::debug_node_plugin</scope><name>plugin_shutdown</name></member>
      <member refid="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1afd32a0c65300dae1c46e94f2e7b19288" prot="public" virt="virtual"><scope>steemit::plugin::debug_node::debug_node_plugin</scope><name>plugin_startup</name></member>
      <member refid="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1a9be4d6a35df72a56caa0c5b84258a3e5" prot="public" virt="non-virtual"><scope>steemit::plugin::debug_node::debug_node_plugin</scope><name>save_debug_updates</name></member>
      <member refid="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1a34c1bd75c40270041c8c17804f235eac" prot="public" virt="non-virtual"><scope>steemit::plugin::debug_node::debug_node_plugin</scope><name>set_json_object_stream</name></member>
      <member refid="classsteemit_1_1app_1_1abstract__plugin_1ad24ecfd977ff071023455ae1eb3c33f0" prot="public" virt="virtual"><scope>steemit::plugin::debug_node::debug_node_plugin</scope><name>~abstract_plugin</name></member>
      <member refid="classsteemit_1_1plugin_1_1debug__node_1_1debug__node__plugin_1a280dd911cd92baf51b5c1dcb93106a54" prot="public" virt="virtual"><scope>steemit::plugin::debug_node::debug_node_plugin</scope><name>~debug_node_plugin</name></member>
      <member refid="classsteemit_1_1app_1_1plugin_1af882b5ab549815c71d909de0384f28eb" prot="public" virt="virtual"><scope>steemit::plugin::debug_node::debug_node_plugin</scope><name>~plugin</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
