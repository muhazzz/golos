<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structsteemit_1_1chain_1_1strcmp__less" kind="struct" language="C++" prot="public">
    <compoundname>steemit::chain::strcmp_less</compoundname>
    <includes refid="comment__object_8hpp" local="no">comment_object.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structsteemit_1_1chain_1_1strcmp__less_1a262c37c4128ae94edfcadb0f46576837" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool steemit::chain::strcmp_less::operator()</definition>
        <argsstring>(const shared_string &amp;a, const shared_string &amp;b) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="namespacesteemit_1_1chain_1a8e2d955447720336a4deaae60ad49519" kindref="member">shared_string</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="namespacesteemit_1_1chain_1a8e2d955447720336a4deaae60ad49519" kindref="member">shared_string</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/comment_object.hpp" line="16" column="1" bodyfile="libraries/chain/include/steemit/chain/comment_object.hpp" bodystart="16" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="structsteemit_1_1chain_1_1strcmp__less_1a7ff2a6e528472c79c48304c34ce19f8e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool steemit::chain::strcmp_less::operator()</definition>
        <argsstring>(const shared_string &amp;a, const string &amp;b) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="namespacesteemit_1_1chain_1a8e2d955447720336a4deaae60ad49519" kindref="member">shared_string</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/comment_object.hpp" line="20" column="1" bodyfile="libraries/chain/include/steemit/chain/comment_object.hpp" bodystart="20" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="structsteemit_1_1chain_1_1strcmp__less_1a75cd5b016ee900a9dabb0ea709af7e65" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool steemit::chain::strcmp_less::operator()</definition>
        <argsstring>(const string &amp;a, const shared_string &amp;b) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const string &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="namespacesteemit_1_1chain_1a8e2d955447720336a4deaae60ad49519" kindref="member">shared_string</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/comment_object.hpp" line="24" column="1" bodyfile="libraries/chain/include/steemit/chain/comment_object.hpp" bodystart="24" bodyend="26"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structsteemit_1_1chain_1_1strcmp__less_1a2f85835baac7ede9e4f72a8babe113f1" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool steemit::chain::strcmp_less::less</definition>
        <argsstring>(const char *a, const char *b) const</argsstring>
        <name>less</name>
        <param>
          <type>const char *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/comment_object.hpp" line="29" column="1" bodyfile="libraries/chain/include/steemit/chain/comment_object.hpp" bodystart="29" bodyend="31"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/chain/include/steemit/chain/comment_object.hpp" line="15" column="1" bodyfile="libraries/chain/include/steemit/chain/comment_object.hpp" bodystart="15" bodyend="32"/>
    <listofallmembers>
      <member refid="structsteemit_1_1chain_1_1strcmp__less_1a2f85835baac7ede9e4f72a8babe113f1" prot="private" virt="non-virtual"><scope>steemit::chain::strcmp_less</scope><name>less</name></member>
      <member refid="structsteemit_1_1chain_1_1strcmp__less_1a262c37c4128ae94edfcadb0f46576837" prot="public" virt="non-virtual"><scope>steemit::chain::strcmp_less</scope><name>operator()</name></member>
      <member refid="structsteemit_1_1chain_1_1strcmp__less_1a7ff2a6e528472c79c48304c34ce19f8e" prot="public" virt="non-virtual"><scope>steemit::chain::strcmp_less</scope><name>operator()</name></member>
      <member refid="structsteemit_1_1chain_1_1strcmp__less_1a75cd5b016ee900a9dabb0ea709af7e65" prot="public" virt="non-virtual"><scope>steemit::chain::strcmp_less</scope><name>operator()</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
