<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structsteemit_1_1app_1_1discussion__query" kind="struct" language="C++" prot="public">
    <compoundname>steemit::app::discussion_query</compoundname>
    <includes refid="database__api_8hpp" local="no">database_api.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structsteemit_1_1app_1_1discussion__query_1a6de2cbcc3bcf889ef0137d199b3811c1" prot="public" static="no" mutable="no">
        <type>string</type>
        <definition>string steemit::app::discussion_query::tag</definition>
        <argsstring></argsstring>
        <name>tag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/steemit/app/database_api.hpp" line="87" column="1" bodyfile="libraries/app/include/steemit/app/database_api.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structsteemit_1_1app_1_1discussion__query_1ac60bad57576798d709123e8b50661c98" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t steemit::app::discussion_query::limit</definition>
        <argsstring></argsstring>
        <name>limit</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/steemit/app/database_api.hpp" line="88" column="1" bodyfile="libraries/app/include/steemit/app/database_api.hpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structsteemit_1_1app_1_1discussion__query_1a66e22d2f80895b8b2b8ea52c50b6a8fc" prot="public" static="no" mutable="no">
        <type>set&lt; string &gt;</type>
        <definition>set&lt;string&gt; steemit::app::discussion_query::filter_tags</definition>
        <argsstring></argsstring>
        <name>filter_tags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/steemit/app/database_api.hpp" line="89" column="1" bodyfile="libraries/app/include/steemit/app/database_api.hpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structsteemit_1_1app_1_1discussion__query_1afe1d3345b9a0ca8d2ad8c56223d427ab" prot="public" static="no" mutable="no">
        <type>set&lt; string &gt;</type>
        <definition>set&lt;string&gt; steemit::app::discussion_query::select_authors</definition>
        <argsstring></argsstring>
        <name>select_authors</name>
        <briefdescription>
<para>list of authors to include, posts not by this author are filtered </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/steemit/app/database_api.hpp" line="90" column="1" bodyfile="libraries/app/include/steemit/app/database_api.hpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structsteemit_1_1app_1_1discussion__query_1a373aa0aa1c88dd3da77f59e530566909" prot="public" static="no" mutable="no">
        <type>set&lt; string &gt;</type>
        <definition>set&lt;string&gt; steemit::app::discussion_query::select_tags</definition>
        <argsstring></argsstring>
        <name>select_tags</name>
        <briefdescription>
<para>list of tags to include, posts without these tags are filtered </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/steemit/app/database_api.hpp" line="91" column="1" bodyfile="libraries/app/include/steemit/app/database_api.hpp" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structsteemit_1_1app_1_1discussion__query_1a9bc8e2bec3395e3c6fc9953b174614f1" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t steemit::app::discussion_query::truncate_body</definition>
        <argsstring></argsstring>
        <name>truncate_body</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>the number of bytes of the post body to return, 0 for all </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/steemit/app/database_api.hpp" line="92" column="1" bodyfile="libraries/app/include/steemit/app/database_api.hpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structsteemit_1_1app_1_1discussion__query_1af32bb7a00816ba465adab3be32396bb4" prot="public" static="no" mutable="no">
        <type>optional&lt; string &gt;</type>
        <definition>optional&lt;string&gt; steemit::app::discussion_query::start_author</definition>
        <argsstring></argsstring>
        <name>start_author</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/steemit/app/database_api.hpp" line="93" column="1" bodyfile="libraries/app/include/steemit/app/database_api.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structsteemit_1_1app_1_1discussion__query_1ae1f24bd292d58ad85e14294c9467e5ad" prot="public" static="no" mutable="no">
        <type>optional&lt; string &gt;</type>
        <definition>optional&lt;string&gt; steemit::app::discussion_query::start_permlink</definition>
        <argsstring></argsstring>
        <name>start_permlink</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/steemit/app/database_api.hpp" line="94" column="1" bodyfile="libraries/app/include/steemit/app/database_api.hpp" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structsteemit_1_1app_1_1discussion__query_1a9bbf8fcc33510d498412943837b2c0ff" prot="public" static="no" mutable="no">
        <type>optional&lt; string &gt;</type>
        <definition>optional&lt;string&gt; steemit::app::discussion_query::parent_author</definition>
        <argsstring></argsstring>
        <name>parent_author</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/steemit/app/database_api.hpp" line="95" column="1" bodyfile="libraries/app/include/steemit/app/database_api.hpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structsteemit_1_1app_1_1discussion__query_1a793832561141f3304413d4bd570dad6e" prot="public" static="no" mutable="no">
        <type>optional&lt; string &gt;</type>
        <definition>optional&lt;string&gt; steemit::app::discussion_query::parent_permlink</definition>
        <argsstring></argsstring>
        <name>parent_permlink</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/steemit/app/database_api.hpp" line="96" column="1" bodyfile="libraries/app/include/steemit/app/database_api.hpp" bodystart="96" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structsteemit_1_1app_1_1discussion__query_1abbb77dd8b2aaef71d89190b38b441777" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::app::discussion_query::validate</definition>
        <argsstring>() const</argsstring>
        <name>validate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/steemit/app/database_api.hpp" line="82" column="1" bodyfile="libraries/app/include/steemit/app/database_api.hpp" bodystart="82" bodyend="85"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="structsteemit_1_1app_1_1discussion__query" kindref="compound">discussion_query</ref> struct implements the query field set. </para>    </briefdescription>
    <detaileddescription>
<para>This struct is supposed to contain field set available to fill in RPC API functions used to retrieve discussions Defines the arguments to a query as a struct so it can be easily extended </para>    </detaileddescription>
    <collaborationgraph>
      <node id="455">
        <label>string</label>
      </node>
      <node id="454">
        <label>steemit::app::discussion_query</label>
        <link refid="structsteemit_1_1app_1_1discussion__query"/>
        <childnode refid="455" relation="usage">
          <edgelabel>tag</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="libraries/app/include/steemit/app/database_api.hpp" line="81" column="1" bodyfile="libraries/app/include/steemit/app/database_api.hpp" bodystart="81" bodyend="97"/>
    <listofallmembers>
      <member refid="structsteemit_1_1app_1_1discussion__query_1a66e22d2f80895b8b2b8ea52c50b6a8fc" prot="public" virt="non-virtual"><scope>steemit::app::discussion_query</scope><name>filter_tags</name></member>
      <member refid="structsteemit_1_1app_1_1discussion__query_1ac60bad57576798d709123e8b50661c98" prot="public" virt="non-virtual"><scope>steemit::app::discussion_query</scope><name>limit</name></member>
      <member refid="structsteemit_1_1app_1_1discussion__query_1a9bbf8fcc33510d498412943837b2c0ff" prot="public" virt="non-virtual"><scope>steemit::app::discussion_query</scope><name>parent_author</name></member>
      <member refid="structsteemit_1_1app_1_1discussion__query_1a793832561141f3304413d4bd570dad6e" prot="public" virt="non-virtual"><scope>steemit::app::discussion_query</scope><name>parent_permlink</name></member>
      <member refid="structsteemit_1_1app_1_1discussion__query_1afe1d3345b9a0ca8d2ad8c56223d427ab" prot="public" virt="non-virtual"><scope>steemit::app::discussion_query</scope><name>select_authors</name></member>
      <member refid="structsteemit_1_1app_1_1discussion__query_1a373aa0aa1c88dd3da77f59e530566909" prot="public" virt="non-virtual"><scope>steemit::app::discussion_query</scope><name>select_tags</name></member>
      <member refid="structsteemit_1_1app_1_1discussion__query_1af32bb7a00816ba465adab3be32396bb4" prot="public" virt="non-virtual"><scope>steemit::app::discussion_query</scope><name>start_author</name></member>
      <member refid="structsteemit_1_1app_1_1discussion__query_1ae1f24bd292d58ad85e14294c9467e5ad" prot="public" virt="non-virtual"><scope>steemit::app::discussion_query</scope><name>start_permlink</name></member>
      <member refid="structsteemit_1_1app_1_1discussion__query_1a6de2cbcc3bcf889ef0137d199b3811c1" prot="public" virt="non-virtual"><scope>steemit::app::discussion_query</scope><name>tag</name></member>
      <member refid="structsteemit_1_1app_1_1discussion__query_1a9bc8e2bec3395e3c6fc9953b174614f1" prot="public" virt="non-virtual"><scope>steemit::app::discussion_query</scope><name>truncate_body</name></member>
      <member refid="structsteemit_1_1app_1_1discussion__query_1abbb77dd8b2aaef71d89190b38b441777" prot="public" virt="non-virtual"><scope>steemit::app::discussion_query</scope><name>validate</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
