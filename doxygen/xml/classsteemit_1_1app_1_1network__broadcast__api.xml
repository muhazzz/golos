<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classsteemit_1_1app_1_1network__broadcast__api" kind="class" language="C++" prot="public">
    <compoundname>steemit::app::network_broadcast_api</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::enable_shared_from_this&lt; network_broadcast_api &gt;</basecompoundref>
    <includes refid="api_8hpp" local="no">api.hpp</includes>
    <innerclass refid="structsteemit_1_1app_1_1network__broadcast__api_1_1transaction__confirmation" prot="public">steemit::app::network_broadcast_api::transaction_confirmation</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classsteemit_1_1app_1_1network__broadcast__api_1a8a855e32bb6d3c2115fa0380cd2793cf" prot="public" static="no">
        <type>std::function&lt; void(variant)&gt;</type>
        <definition>typedef std::function&lt;void(variant)&gt; steemit::app::network_broadcast_api::confirmation_callback</definition>
        <argsstring></argsstring>
        <name>confirmation_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/steemit/app/api.hpp" line="73" column="1" bodyfile="libraries/app/include/steemit/app/api.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classsteemit_1_1app_1_1network__broadcast__api_1a5eb47d732e196454cb93e33afc5fe08e" prot="private" static="no" mutable="no">
        <type>boost::signals2::scoped_connection</type>
        <definition>boost::signals2::scoped_connection steemit::app::network_broadcast_api::_applied_block_connection</definition>
        <argsstring></argsstring>
        <name>_applied_block_connection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/steemit/app/api.hpp" line="116" column="1" bodyfile="libraries/app/include/steemit/app/api.hpp" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsteemit_1_1app_1_1network__broadcast__api_1a2e009a28f0e5b02bbdefbe1b987e5851" prot="private" static="no" mutable="no">
        <type>map&lt; transaction_id_type, <ref refid="classsteemit_1_1app_1_1network__broadcast__api_1a8a855e32bb6d3c2115fa0380cd2793cf" kindref="member">confirmation_callback</ref> &gt;</type>
        <definition>map&lt;transaction_id_type, confirmation_callback&gt; steemit::app::network_broadcast_api::_callbacks</definition>
        <argsstring></argsstring>
        <name>_callbacks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/steemit/app/api.hpp" line="118" column="1" bodyfile="libraries/app/include/steemit/app/api.hpp" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsteemit_1_1app_1_1network__broadcast__api_1a5fea91fce9b92f3060f6d8956a8867dd" prot="private" static="no" mutable="no">
        <type>map&lt; time_point_sec, vector&lt; transaction_id_type &gt; &gt;</type>
        <definition>map&lt;time_point_sec, vector&lt;transaction_id_type&gt; &gt; steemit::app::network_broadcast_api::_callbacks_expirations</definition>
        <argsstring></argsstring>
        <name>_callbacks_expirations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/steemit/app/api.hpp" line="119" column="1" bodyfile="libraries/app/include/steemit/app/api.hpp" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsteemit_1_1app_1_1network__broadcast__api_1ac3237e5c886bebd6862c1630287c5d75" prot="private" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t steemit::app::network_broadcast_api::_max_block_age</definition>
        <argsstring></argsstring>
        <name>_max_block_age</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/steemit/app/api.hpp" line="121" column="1" bodyfile="libraries/app/include/steemit/app/api.hpp" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsteemit_1_1app_1_1network__broadcast__api_1af7d06ab5e740f311b2035089b6f37b06" prot="private" static="no" mutable="no">
        <type><ref refid="classsteemit_1_1app_1_1application" kindref="compound">application</ref> &amp;</type>
        <definition>application&amp; steemit::app::network_broadcast_api::_app</definition>
        <argsstring></argsstring>
        <name>_app</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/steemit/app/api.hpp" line="123" column="1" bodyfile="libraries/app/include/steemit/app/api.hpp" bodystart="123" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classsteemit_1_1app_1_1network__broadcast__api_1a55fd282eddecbd08b08e2fc0b8bb295e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>steemit::app::network_broadcast_api::network_broadcast_api</definition>
        <argsstring>(const api_context &amp;a)</argsstring>
        <name>network_broadcast_api</name>
        <param>
          <type>const <ref refid="structsteemit_1_1app_1_1api__context" kindref="compound">api_context</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>NOTE: cannot register callbacks in constructor because shared_from_this() is not valid. </para>        </inbodydescription>
        <location file="libraries/app/include/steemit/app/api.hpp" line="60" column="1" bodyfile="libraries/app/api.cpp" bodystart="113" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classsteemit_1_1app_1_1network__broadcast__api_1abfcbe334b5bea410d87c313c0af153e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::app::network_broadcast_api::broadcast_transaction</definition>
        <argsstring>(const signed_transaction &amp;trx)</argsstring>
        <name>broadcast_transaction</name>
        <param>
          <type>const signed_transaction &amp;</type>
          <declname>trx</declname>
        </param>
        <briefdescription>
<para>Broadcast a transaction to the network. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trx</parametername>
</parameternamelist>
<parameterdescription>
<para>The transaction to broadcast</para></parameterdescription>
</parameteritem>
</parameterlist>
The transaction will be checked for validity in the local database prior to broadcasting. If it fails to apply locally, an error will be thrown and the transaction will not be broadcast. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/steemit/app/api.hpp" line="82" column="1" bodyfile="libraries/app/api.cpp" bodystart="194" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classsteemit_1_1app_1_1network__broadcast__api_1a13c842f9b420e379f541c54023dd7d4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::app::network_broadcast_api::broadcast_transaction_with_callback</definition>
        <argsstring>(confirmation_callback cb, const signed_transaction &amp;trx)</argsstring>
        <name>broadcast_transaction_with_callback</name>
        <param>
          <type><ref refid="classsteemit_1_1app_1_1network__broadcast__api_1a8a855e32bb6d3c2115fa0380cd2793cf" kindref="member">confirmation_callback</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>const signed_transaction &amp;</type>
          <declname>trx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>this version of broadcast transaction registers a callback method that will be called when the transaction is included into a block. The callback method includes the transaction id, block number, and transaction number in the block. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/steemit/app/api.hpp" line="88" column="1" bodyfile="libraries/app/api.cpp" bodystart="230" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classsteemit_1_1app_1_1network__broadcast__api_1abd0c025cc1606a5fa856501eb6ab1cc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>fc::variant</type>
        <definition>fc::variant steemit::app::network_broadcast_api::broadcast_transaction_synchronous</definition>
        <argsstring>(const signed_transaction &amp;trx)</argsstring>
        <name>broadcast_transaction_synchronous</name>
        <param>
          <type>const signed_transaction &amp;</type>
          <declname>trx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This call will not return until the transaction is included in a block. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/steemit/app/api.hpp" line="93" column="1" bodyfile="libraries/app/api.cpp" bodystart="207" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="classsteemit_1_1app_1_1network__broadcast__api_1a9583043e0b2cfbdd26eeee69424b6a3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::app::network_broadcast_api::broadcast_block</definition>
        <argsstring>(const signed_block &amp;block)</argsstring>
        <name>broadcast_block</name>
        <param>
          <type>const signed_block &amp;</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/steemit/app/api.hpp" line="95" column="1" bodyfile="libraries/app/api.cpp" bodystart="220" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classsteemit_1_1app_1_1network__broadcast__api_1a466b1b7e1bb63c5615262914a7034e00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::app::network_broadcast_api::set_max_block_age</definition>
        <argsstring>(int32_t max_block_age)</argsstring>
        <name>set_max_block_age</name>
        <param>
          <type>int32_t</type>
          <declname>max_block_age</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/steemit/app/api.hpp" line="97" column="1" bodyfile="libraries/app/api.cpp" bodystart="139" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classsteemit_1_1app_1_1network__broadcast__api_1a2a62a875a396c752781decd98cf9b6b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool steemit::app::network_broadcast_api::check_max_block_age</definition>
        <argsstring>(int32_t max_block_age)</argsstring>
        <name>check_max_block_age</name>
        <param>
          <type>int32_t</type>
          <declname>max_block_age</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/steemit/app/api.hpp" line="100" column="1" bodyfile="libraries/app/api.cpp" bodystart="125" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classsteemit_1_1app_1_1network__broadcast__api_1ab544cc46629bea692bad816e21662677" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::app::network_broadcast_api::on_applied_block</definition>
        <argsstring>(const signed_block &amp;b)</argsstring>
        <name>on_applied_block</name>
        <param>
          <type>const signed_block &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Not reflected, thus not accessible to API clients. </para>        </briefdescription>
        <detaileddescription>
<para>This function is registered to receive the applied_block signal from the chain database when a block is received. It then dispatches callbacks to clients who have requested to be notified when a particular txid is included in a block. </para>        </detaileddescription>
        <inbodydescription>
<para>we need to ensure the <ref refid="classsteemit_1_1app_1_1database__api" kindref="compound">database_api</ref> is not deleted for the life of the async operation</para><para>clear all expirations</para><para>fc::async </para>        </inbodydescription>
        <location file="libraries/app/include/steemit/app/api.hpp" line="110" column="1" bodyfile="libraries/app/api.cpp" bodystart="143" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classsteemit_1_1app_1_1network__broadcast__api_1acc8f57bf67bf530887908288e9c22a4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::app::network_broadcast_api::on_api_startup</definition>
        <argsstring>()</argsstring>
        <name>on_api_startup</name>
        <briefdescription>
<para>internal method, not exposed via JSON RPC </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>note cannot capture shared pointer here, because _applied_block_connection will never be freed if the lambda holds a reference to it. </para>        </inbodydescription>
        <location file="libraries/app/include/steemit/app/api.hpp" line="113" column="1" bodyfile="libraries/app/api.cpp" bodystart="119" bodyend="123"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classsteemit_1_1app_1_1network__broadcast__api" kindref="compound">network_broadcast_api</ref> class allows broadcasting of transactions. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="707">
        <label>steemit::app::network_broadcast_api</label>
        <link refid="classsteemit_1_1app_1_1network__broadcast__api"/>
        <childnode refid="708" relation="public-inheritance">
        </childnode>
      </node>
      <node id="708">
        <label>std::enable_shared_from_this&lt; network_broadcast_api &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="709">
        <label>steemit::app::network_broadcast_api</label>
        <link refid="classsteemit_1_1app_1_1network__broadcast__api"/>
        <childnode refid="710" relation="public-inheritance">
        </childnode>
      </node>
      <node id="710">
        <label>std::enable_shared_from_this&lt; network_broadcast_api &gt;</label>
      </node>
    </collaborationgraph>
    <location file="libraries/app/include/steemit/app/api.hpp" line="58" column="1" bodyfile="libraries/app/include/steemit/app/api.hpp" bodystart="57" bodyend="124"/>
    <listofallmembers>
      <member refid="classsteemit_1_1app_1_1network__broadcast__api_1af7d06ab5e740f311b2035089b6f37b06" prot="private" virt="non-virtual"><scope>steemit::app::network_broadcast_api</scope><name>_app</name></member>
      <member refid="classsteemit_1_1app_1_1network__broadcast__api_1a5eb47d732e196454cb93e33afc5fe08e" prot="private" virt="non-virtual"><scope>steemit::app::network_broadcast_api</scope><name>_applied_block_connection</name></member>
      <member refid="classsteemit_1_1app_1_1network__broadcast__api_1a2e009a28f0e5b02bbdefbe1b987e5851" prot="private" virt="non-virtual"><scope>steemit::app::network_broadcast_api</scope><name>_callbacks</name></member>
      <member refid="classsteemit_1_1app_1_1network__broadcast__api_1a5fea91fce9b92f3060f6d8956a8867dd" prot="private" virt="non-virtual"><scope>steemit::app::network_broadcast_api</scope><name>_callbacks_expirations</name></member>
      <member refid="classsteemit_1_1app_1_1network__broadcast__api_1ac3237e5c886bebd6862c1630287c5d75" prot="private" virt="non-virtual"><scope>steemit::app::network_broadcast_api</scope><name>_max_block_age</name></member>
      <member refid="classsteemit_1_1app_1_1network__broadcast__api_1a9583043e0b2cfbdd26eeee69424b6a3a" prot="public" virt="non-virtual"><scope>steemit::app::network_broadcast_api</scope><name>broadcast_block</name></member>
      <member refid="classsteemit_1_1app_1_1network__broadcast__api_1abfcbe334b5bea410d87c313c0af153e2" prot="public" virt="non-virtual"><scope>steemit::app::network_broadcast_api</scope><name>broadcast_transaction</name></member>
      <member refid="classsteemit_1_1app_1_1network__broadcast__api_1abd0c025cc1606a5fa856501eb6ab1cc7" prot="public" virt="non-virtual"><scope>steemit::app::network_broadcast_api</scope><name>broadcast_transaction_synchronous</name></member>
      <member refid="classsteemit_1_1app_1_1network__broadcast__api_1a13c842f9b420e379f541c54023dd7d4a" prot="public" virt="non-virtual"><scope>steemit::app::network_broadcast_api</scope><name>broadcast_transaction_with_callback</name></member>
      <member refid="classsteemit_1_1app_1_1network__broadcast__api_1a2a62a875a396c752781decd98cf9b6b6" prot="public" virt="non-virtual"><scope>steemit::app::network_broadcast_api</scope><name>check_max_block_age</name></member>
      <member refid="classsteemit_1_1app_1_1network__broadcast__api_1a8a855e32bb6d3c2115fa0380cd2793cf" prot="public" virt="non-virtual"><scope>steemit::app::network_broadcast_api</scope><name>confirmation_callback</name></member>
      <member refid="classsteemit_1_1app_1_1network__broadcast__api_1a55fd282eddecbd08b08e2fc0b8bb295e" prot="public" virt="non-virtual"><scope>steemit::app::network_broadcast_api</scope><name>network_broadcast_api</name></member>
      <member refid="classsteemit_1_1app_1_1network__broadcast__api_1acc8f57bf67bf530887908288e9c22a4d" prot="public" virt="non-virtual"><scope>steemit::app::network_broadcast_api</scope><name>on_api_startup</name></member>
      <member refid="classsteemit_1_1app_1_1network__broadcast__api_1ab544cc46629bea692bad816e21662677" prot="public" virt="non-virtual"><scope>steemit::app::network_broadcast_api</scope><name>on_applied_block</name></member>
      <member refid="classsteemit_1_1app_1_1network__broadcast__api_1a466b1b7e1bb63c5615262914a7034e00" prot="public" virt="non-virtual"><scope>steemit::app::network_broadcast_api</scope><name>set_max_block_age</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
