<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl" kind="class" language="C++" prot="public">
    <compoundname>steemit::app::detail::application_impl</compoundname>
    <basecompoundref prot="public" virt="non-virtual">node_delegate</basecompoundref>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1acf92fce4358db60e97d15b3503b6d135" prot="public" static="no" mutable="no">
        <type>fc::optional&lt; fc::temp_file &gt;</type>
        <definition>fc::optional&lt;fc::temp_file&gt; steemit::app::detail::application_impl::_lock_file</definition>
        <argsstring></argsstring>
        <name>_lock_file</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="71" column="1" bodyfile="libraries/app/application.cpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1ac564fdb361ea1ef14acb5894503a63e6" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool steemit::app::detail::application_impl::_is_block_producer</definition>
        <argsstring></argsstring>
        <name>_is_block_producer</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="72" column="1" bodyfile="libraries/app/application.cpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a3836944b78f4abc28fad65a65b8ab473" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool steemit::app::detail::application_impl::_force_validate</definition>
        <argsstring></argsstring>
        <name>_force_validate</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="73" column="1" bodyfile="libraries/app/application.cpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1ad47b14adeed0319f84588f503b321247" prot="public" static="no" mutable="no">
        <type><ref refid="de/d5e/classsteemit_1_1app_1_1application" kindref="compound">application</ref> *</type>
        <definition>application* steemit::app::detail::application_impl::_self</definition>
        <argsstring></argsstring>
        <name>_self</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="836" column="1" bodyfile="libraries/app/application.cpp" bodystart="836" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a17f5914ac52fb17ca8475e002dadc23b" prot="public" static="no" mutable="no">
        <type>fc::path</type>
        <definition>fc::path steemit::app::detail::application_impl::_data_dir</definition>
        <argsstring></argsstring>
        <name>_data_dir</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="838" column="1" bodyfile="libraries/app/application.cpp" bodystart="838" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a6a53282ce7a1b0b7d5b015b60769e921" prot="public" static="no" mutable="no">
        <type>fc::path</type>
        <definition>fc::path steemit::app::detail::application_impl::_shared_dir</definition>
        <argsstring></argsstring>
        <name>_shared_dir</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="839" column="1" bodyfile="libraries/app/application.cpp" bodystart="839" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a351e7c7d86bb706e9b6840abb4edad7d" prot="public" static="no" mutable="no">
        <type>const bpo::variables_map *</type>
        <definition>const bpo::variables_map* steemit::app::detail::application_impl::_options</definition>
        <argsstring></argsstring>
        <name>_options</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="840" column="1" bodyfile="libraries/app/application.cpp" bodystart="840" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1ad15e184770aaa20e3286fd6200f0e5cd" prot="public" static="no" mutable="no">
        <type><ref refid="d5/de0/structsteemit_1_1app_1_1api__access" kindref="compound">api_access</ref></type>
        <definition>api_access steemit::app::detail::application_impl::_apiaccess</definition>
        <argsstring></argsstring>
        <name>_apiaccess</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="841" column="1" bodyfile="libraries/app/application.cpp" bodystart="841" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a2f13dc6b6aa67462250ad4b718f3d332" prot="public" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="da/d98/classsteemit_1_1chain_1_1database" kindref="compound">steemit::chain::database</ref> &gt;</type>
        <definition>std::shared_ptr&lt;steemit::chain::database&gt; steemit::app::detail::application_impl::_chain_db</definition>
        <argsstring></argsstring>
        <name>_chain_db</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="844" column="1" bodyfile="libraries/app/application.cpp" bodystart="844" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1ac478f9bd86f85c33297e067937794cde" prot="public" static="no" mutable="no">
        <type>std::shared_ptr&lt; graphene::net::node &gt;</type>
        <definition>std::shared_ptr&lt;graphene::net::node&gt; steemit::app::detail::application_impl::_p2p_network</definition>
        <argsstring></argsstring>
        <name>_p2p_network</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="845" column="1" bodyfile="libraries/app/application.cpp" bodystart="845" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1ad056e6107bc5b4e7ace7ec38a2dfc385" prot="public" static="no" mutable="no">
        <type>std::shared_ptr&lt; fc::http::websocket_server &gt;</type>
        <definition>std::shared_ptr&lt;fc::http::websocket_server&gt; steemit::app::detail::application_impl::_websocket_server</definition>
        <argsstring></argsstring>
        <name>_websocket_server</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="846" column="1" bodyfile="libraries/app/application.cpp" bodystart="846" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1af917a5d69b7e09d7a62f85e18931a064" prot="public" static="no" mutable="no">
        <type>std::shared_ptr&lt; fc::http::websocket_tls_server &gt;</type>
        <definition>std::shared_ptr&lt;fc::http::websocket_tls_server&gt; steemit::app::detail::application_impl::_websocket_tls_server</definition>
        <argsstring></argsstring>
        <name>_websocket_tls_server</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="847" column="1" bodyfile="libraries/app/application.cpp" bodystart="847" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a287718cb03007d51f545565808136c11" prot="public" static="no" mutable="no">
        <type>std::map&lt; string, std::shared_ptr&lt; <ref refid="dc/d57/classsteemit_1_1app_1_1abstract__plugin" kindref="compound">abstract_plugin</ref> &gt; &gt;</type>
        <definition>std::map&lt;string, std::shared_ptr&lt;abstract_plugin&gt; &gt; steemit::app::detail::application_impl::_plugins_available</definition>
        <argsstring></argsstring>
        <name>_plugins_available</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="849" column="1" bodyfile="libraries/app/application.cpp" bodystart="849" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a4127f1edab6894c5faecad3ccf67a740" prot="public" static="no" mutable="no">
        <type>std::map&lt; string, std::shared_ptr&lt; <ref refid="dc/d57/classsteemit_1_1app_1_1abstract__plugin" kindref="compound">abstract_plugin</ref> &gt; &gt;</type>
        <definition>std::map&lt;string, std::shared_ptr&lt;abstract_plugin&gt; &gt; steemit::app::detail::application_impl::_plugins_enabled</definition>
        <argsstring></argsstring>
        <name>_plugins_enabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="850" column="1" bodyfile="libraries/app/application.cpp" bodystart="850" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a4682bee987068ffa378c289f06838431" prot="public" static="no" mutable="no">
        <type>flat_map&lt; std::string, std::function&lt; fc::api_ptr(const <ref refid="d1/d23/structsteemit_1_1app_1_1api__context" kindref="compound">api_context</ref> &amp;)&gt; &gt;</type>
        <definition>flat_map&lt;std::string, std::function&lt;fc::api_ptr(const api_context &amp;)&gt; &gt; steemit::app::detail::application_impl::_api_factories_by_name</definition>
        <argsstring></argsstring>
        <name>_api_factories_by_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="851" column="1" bodyfile="libraries/app/application.cpp" bodystart="851" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1af10a9ec13335244f4e2b6c12afba6a81" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; steemit::app::detail::application_impl::_public_apis</definition>
        <argsstring></argsstring>
        <name>_public_apis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="852" column="1" bodyfile="libraries/app/application.cpp" bodystart="852" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a4ce3d8cf06d5ca0ec4b365fc81beb62b" prot="public" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t steemit::app::detail::application_impl::_max_block_age</definition>
        <argsstring></argsstring>
        <name>_max_block_age</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="853" column="1" bodyfile="libraries/app/application.cpp" bodystart="853" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a17798605ea8dab16459d1ae4fa1d8bb7" prot="public" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t steemit::app::detail::application_impl::_shared_file_size</definition>
        <argsstring></argsstring>
        <name>_shared_file_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="854" column="1" bodyfile="libraries/app/application.cpp" bodystart="854" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1ac5d350346743b9a99f37ff2787ac25d8" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool steemit::app::detail::application_impl::_running</definition>
        <argsstring></argsstring>
        <name>_running</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="856" column="1" bodyfile="libraries/app/application.cpp" bodystart="856" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1ae31172abd11c89e090a5a964e0df3fd7" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t steemit::app::detail::application_impl::allow_future_time</definition>
        <argsstring></argsstring>
        <name>allow_future_time</name>
        <initializer>= 5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="858" column="1" bodyfile="libraries/app/application.cpp" bodystart="858" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a841d65fc5999ef6569bf651062e60032" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::app::detail::application_impl::reset_p2p_node</definition>
        <argsstring>(const fc::path &amp;data_dir)</argsstring>
        <name>reset_p2p_node</name>
        <param>
          <type>const fc::path &amp;</type>
          <declname>data_dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="75" column="1" bodyfile="libraries/app/application.cpp" bodystart="75" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1aefd56a9ef9fcb4d2b09c0b90c9918514" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; fc::ip::endpoint &gt;</type>
        <definition>std::vector&lt;fc::ip::endpoint&gt; steemit::app::detail::application_impl::resolve_string_to_ip_endpoints</definition>
        <argsstring>(const std::string &amp;endpoint_string)</argsstring>
        <name>resolve_string_to_ip_endpoints</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>endpoint_string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="127" column="1" bodyfile="libraries/app/application.cpp" bodystart="127" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a3d5664fa0f199783c04369e314cbfb17" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::app::detail::application_impl::reset_websocket_server</definition>
        <argsstring>()</argsstring>
        <name>reset_websocket_server</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="151" column="1" bodyfile="libraries/app/application.cpp" bodystart="151" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1afb51c055f517a0ad44d744473db030ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::app::detail::application_impl::reset_websocket_tls_server</definition>
        <argsstring>()</argsstring>
        <name>reset_websocket_tls_server</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="170" column="1" bodyfile="libraries/app/application.cpp" bodystart="170" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a371b86112f200e65c18a492dc6afe1bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::app::detail::application_impl::on_connection</definition>
        <argsstring>(const fc::http::websocket_connection_ptr &amp;c)</argsstring>
        <name>on_connection</name>
        <param>
          <type>const fc::http::websocket_connection_ptr &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="195" column="1" bodyfile="libraries/app/application.cpp" bodystart="195" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a4312058c7c8f0631de73b5fe4c3a6f91" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>steemit::app::detail::application_impl::application_impl</definition>
        <argsstring>(application *self)</argsstring>
        <name>application_impl</name>
        <param>
          <type><ref refid="de/d5e/classsteemit_1_1app_1_1application" kindref="compound">application</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="212" column="1" bodyfile="libraries/app/application.cpp" bodystart="212" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1ad9253c72bbf051eacedb609f6981e17d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>steemit::app::detail::application_impl::~application_impl</definition>
        <argsstring>()</argsstring>
        <name>~application_impl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="218" column="1" bodyfile="libraries/app/application.cpp" bodystart="218" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a8a2427dd60af853be10f7d0b12093197" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::app::detail::application_impl::register_builtin_apis</definition>
        <argsstring>()</argsstring>
        <name>register_builtin_apis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="221" column="1" bodyfile="libraries/app/application.cpp" bodystart="221" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a45045ad57a849fcf180e4c5a6f58743d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::app::detail::application_impl::startup</definition>
        <argsstring>()</argsstring>
        <name>startup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="228" column="1" bodyfile="libraries/app/application.cpp" bodystart="228" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1afdaf7e18985e8dd81a1c2b360f662156" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>optional&lt; <ref refid="df/df9/structsteemit_1_1app_1_1api__access__info" kindref="compound">api_access_info</ref> &gt;</type>
        <definition>optional&lt;api_access_info&gt; steemit::app::detail::application_impl::get_api_access_info</definition>
        <argsstring>(const string &amp;username) const</argsstring>
        <name>get_api_access_info</name>
        <param>
          <type>const string &amp;</type>
          <declname>username</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="357" column="1" bodyfile="libraries/app/application.cpp" bodystart="357" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1ac8283494f835a3fd535052eaed3ce692" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::app::detail::application_impl::set_api_access_info</definition>
        <argsstring>(const string &amp;username, api_access_info &amp;&amp;permissions)</argsstring>
        <name>set_api_access_info</name>
        <param>
          <type>const string &amp;</type>
          <declname>username</declname>
        </param>
        <param>
          <type><ref refid="df/df9/structsteemit_1_1app_1_1api__access__info" kindref="compound">api_access_info</ref> &amp;&amp;</type>
          <declname>permissions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="369" column="1" bodyfile="libraries/app/application.cpp" bodystart="369" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a7901ae02cb6099d15269b504370b2894" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::app::detail::application_impl::register_api_factory</definition>
        <argsstring>(const string &amp;name, std::function&lt; fc::api_ptr(const api_context &amp;)&gt; factory)</argsstring>
        <name>register_api_factory</name>
        <param>
          <type>const string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::function&lt; fc::api_ptr(const <ref refid="d1/d23/structsteemit_1_1app_1_1api__context" kindref="compound">api_context</ref> &amp;)&gt;</type>
          <declname>factory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="373" column="1" bodyfile="libraries/app/application.cpp" bodystart="373" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1ac419c9f3f96b5e518a8d1bc25a302b19" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>fc::api_ptr</type>
        <definition>fc::api_ptr steemit::app::detail::application_impl::create_api_by_name</definition>
        <argsstring>(const api_context &amp;ctx)</argsstring>
        <name>create_api_by_name</name>
        <param>
          <type>const <ref refid="d1/d23/structsteemit_1_1app_1_1api__context" kindref="compound">api_context</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="377" column="1" bodyfile="libraries/app/application.cpp" bodystart="377" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a5f85b572adcf23a26968afe05e08628f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool steemit::app::detail::application_impl::has_item</definition>
        <argsstring>(const graphene::net::item_id &amp;id) override</argsstring>
        <name>has_item</name>
        <param>
          <type>const graphene::net::item_id &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If delegate has the item, the network has no need to fetch it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="389" column="1" bodyfile="libraries/app/application.cpp" bodystart="389" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a42d0757e6ff0fb4b4ba51bfba853d960" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool steemit::app::detail::application_impl::handle_block</definition>
        <argsstring>(const graphene::net::block_message &amp;blk_msg, bool sync_mode, std::vector&lt; fc::uint160_t &gt; &amp;contained_transaction_message_ids) override</argsstring>
        <name>handle_block</name>
        <param>
          <type>const graphene::net::block_message &amp;</type>
          <declname>blk_msg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sync_mode</declname>
        </param>
        <param>
          <type>std::vector&lt; fc::uint160_t &gt; &amp;</type>
          <declname>contained_transaction_message_ids</declname>
        </param>
        <briefdescription>
<para>allows the application to validate an item prior to broadcasting to peers. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sync_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>true if the message was fetched through the sync process, false during normal operation </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if this message caused the blockchain to switch forks, false if it did not</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>exception</parametername>
</parameternamelist>
<parameterdescription>
<para>if error validating the item, otherwise the item is safe to broadcast on. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="413" column="1" bodyfile="libraries/app/application.cpp" bodystart="413" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1ad3da61169da155185dfd9a2e302b2b79" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void steemit::app::detail::application_impl::handle_transaction</definition>
        <argsstring>(const graphene::net::trx_message &amp;transaction_message) override</argsstring>
        <name>handle_transaction</name>
        <param>
          <type>const graphene::net::trx_message &amp;</type>
          <declname>transaction_message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="483" column="1" bodyfile="libraries/app/application.cpp" bodystart="483" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a9e3240ac0577124af7bb863a81507d76" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void steemit::app::detail::application_impl::handle_message</definition>
        <argsstring>(const message &amp;message_to_process) override</argsstring>
        <name>handle_message</name>
        <param>
          <type>const message &amp;</type>
          <declname>message_to_process</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="491" column="1" bodyfile="libraries/app/application.cpp" bodystart="491" bodyend="494"/>
      </memberdef>
      <memberdef kind="function" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1ac0bff9d48659914c1b708fbb2a1edfe0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool steemit::app::detail::application_impl::is_included_block</definition>
        <argsstring>(const block_id_type &amp;block_id)</argsstring>
        <name>is_included_block</name>
        <param>
          <type>const block_id_type &amp;</type>
          <declname>block_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="496" column="1" bodyfile="libraries/app/application.cpp" bodystart="496" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1ae8b30d90fca5ece635d932cb81e9afe5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>std::vector&lt; item_hash_t &gt;</type>
        <definition>virtual std::vector&lt;item_hash_t&gt; steemit::app::detail::application_impl::get_block_ids</definition>
        <argsstring>(const std::vector&lt; item_hash_t &gt; &amp;blockchain_synopsis, uint32_t &amp;remaining_item_count, uint32_t limit) override</argsstring>
        <name>get_block_ids</name>
        <param>
          <type>const std::vector&lt; item_hash_t &gt; &amp;</type>
          <declname>blockchain_synopsis</declname>
        </param>
        <param>
          <type>uint32_t &amp;</type>
          <declname>remaining_item_count</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assuming all data elements are ordered in some way, this method should return up to limit ids that occur <emphasis>after</emphasis> the last ID in synopsis that we recognize.</para><para>On return, remaining_item_count will be set to the number of items in our blockchain after the last item returned in the result, or 0 if the result contains the last item in the blockchain </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="511" column="1" bodyfile="libraries/app/application.cpp" bodystart="511" bodyend="564"/>
      </memberdef>
      <memberdef kind="function" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a52ea2173abc396d98017d5e933226e80" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>message</type>
        <definition>virtual message steemit::app::detail::application_impl::get_item</definition>
        <argsstring>(const item_id &amp;id) override</argsstring>
        <name>get_item</name>
        <param>
          <type>const item_id &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Given the hash of the requested data, fetch the body. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="569" column="1" bodyfile="libraries/app/application.cpp" bodystart="569" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a953b9971e7e523b9a38ef3cd8524e167" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>std::vector&lt; item_hash_t &gt;</type>
        <definition>virtual std::vector&lt;item_hash_t&gt; steemit::app::detail::application_impl::get_blockchain_synopsis</definition>
        <argsstring>(const item_hash_t &amp;reference_point, uint32_t number_of_blocks_after_reference_point) override</argsstring>
        <name>get_blockchain_synopsis</name>
        <param>
          <type>const item_hash_t &amp;</type>
          <declname>reference_point</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>number_of_blocks_after_reference_point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a synopsis of the blockchain used for syncing. This consists of a list of block hashes at intervals exponentially increasing towards the genesis block. When syncing to a peer, the peer uses this data to determine if we&apos;re on the same fork as they are, and if not, what blocks they need to send us to get us on their fork.</para><para>In the over-simplified case, this is a straighforward synopsis of our current preferred blockchain; when we first connect up to a peer, this is what we will be sending. It looks like this: If the blockchain is empty, it will return the empty list. If the blockchain has one block, it will return a list containing just that block. If it contains more than one block: the first element in the list will be the hash of the highest numbered block that we cannot undo the second element will be the hash of an item at the half way point in the undoable segment of the blockchain the third will be ~3/4 of the way through the undoable segment of the block chain the fourth will be at ~7/8... &amp;c. the last item in the list will be the hash of the most recent block on our preferred chain so if the blockchain had 26 blocks labeled a - z, the synopsis would be: a n u x z the idea being that by sending a small (&lt;30) number of block ids, we can summarize a huge blockchain. The block ids are more dense near the end of the chain where because we are more likely to be almost in sync when we first connect, and forks are likely to be short. If the peer we&apos;re syncing with in our example is on a fork that started at block &apos;v&apos;, then they will reply to our synopsis with a list of all blocks starting from block &apos;u&apos;, the last block they know that we had in common.</para><para>In the real code, there are several complications.</para><para>First, as an optimization, we don&apos;t usually send a synopsis of the entire blockchain, we send a synopsis of only the segment of the blockchain that we have undo data for. If their fork doesn&apos;t build off of something in our undo history, we would be unable to switch, so there&apos;s no reason to fetch the blocks.</para><para>Second, when a peer replies to our initial synopsis and gives us a list of the blocks they think we are missing, they only send a chunk of a few thousand blocks at once. After we get those block ids, we need to request more blocks by sending another synopsis (we can&apos;t just say &quot;send me
the next 2000 ids&quot; because they may have switched forks themselves and they don&apos;t track what they&apos;ve sent us). For faster performance, we want to get a fairly long list of block ids first, then start downloading the blocks. The peer doesn&apos;t handle these follow-up block id requests any different from the initial request; it treats the synopsis we send as our blockchain and bases its response entirely off that. So to get the response we want (the next chunk of block ids following the last one they sent us, or, failing that, the shortest fork off of the last list of block ids they sent), we need to construct a synopsis as if our blockchain was made up of:<orderedlist>
<listitem><para>the blocks in our block chain up to the fork point (if there is a fork) or the head block (if no fork)</para></listitem><listitem><para>the blocks we&apos;ve already pushed from their fork (if there&apos;s a fork)</para></listitem><listitem><para>the block ids they&apos;ve previously sent us Segment 3 is handled in the p2p code, it just tells us the number of blocks it has (in number_of_blocks_after_reference_point) so we can leave space in the synopsis for them. We&apos;re responsible for constructing the synopsis of Segments 1 and 2 from our active blockchain and fork database. The reference_point parameter is the last block from that peer that has been successfully pushed to the blockchain, so that tells us whether the peer is on a fork or on the main chain. </para></listitem></orderedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="643" column="1" bodyfile="libraries/app/application.cpp" bodystart="643" bodyend="762"/>
      </memberdef>
      <memberdef kind="function" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a363b461d5abcdeb9d6a0dbedf38b26c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void steemit::app::detail::application_impl::sync_status</definition>
        <argsstring>(uint32_t item_type, uint32_t item_count) override</argsstring>
        <name>sync_status</name>
        <param>
          <type>uint32_t</type>
          <declname>item_type</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>item_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Call this after the call to handle_message succeeds.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item_type</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the item we&apos;re synchronizing, will be the same as item passed to the sync_from() call </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item_count</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of items known to the node that haven&apos;t been sent to handle_item() yet. After <computeroutput>item_count</computeroutput> more calls to handle_item(), the node will be in sync </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="771" column="1" bodyfile="libraries/app/application.cpp" bodystart="771" bodyend="773"/>
      </memberdef>
      <memberdef kind="function" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1aaaa1ff832e0b86a447e6cfaacbf2ec66" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void steemit::app::detail::application_impl::connection_count_changed</definition>
        <argsstring>(uint32_t c) override</argsstring>
        <name>connection_count_changed</name>
        <param>
          <type>uint32_t</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Call any time the number of connected peers changes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="778" column="1" bodyfile="libraries/app/application.cpp" bodystart="778" bodyend="780"/>
      </memberdef>
      <memberdef kind="function" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1ac39432b8121c265ff56cf6fdebb6a267" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>uint32_t</type>
        <definition>virtual uint32_t steemit::app::detail::application_impl::get_block_number</definition>
        <argsstring>(const item_hash_t &amp;block_id) override</argsstring>
        <name>get_block_number</name>
        <param>
          <type>const item_hash_t &amp;</type>
          <declname>block_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="782" column="1" bodyfile="libraries/app/application.cpp" bodystart="782" bodyend="786"/>
      </memberdef>
      <memberdef kind="function" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a4ae0d3841eb29ecbf8f77459a65e2257" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>fc::time_point_sec</type>
        <definition>virtual fc::time_point_sec steemit::app::detail::application_impl::get_block_time</definition>
        <argsstring>(const item_hash_t &amp;block_id) override</argsstring>
        <name>get_block_time</name>
        <param>
          <type>const item_hash_t &amp;</type>
          <declname>block_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the time a block was produced (if block_id = 0, returns genesis time). If we don&apos;t know about the block, returns time_point_sec::min() </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="792" column="1" bodyfile="libraries/app/application.cpp" bodystart="792" bodyend="800"/>
      </memberdef>
      <memberdef kind="function" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a8b1a9300dfea908827c69eb160e3b88d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>fc::time_point_sec</type>
        <definition>virtual fc::time_point_sec steemit::app::detail::application_impl::get_blockchain_now</definition>
        <argsstring>() override</argsstring>
        <name>get_blockchain_now</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns graphene::time::now() </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="803" column="1" bodyfile="libraries/app/application.cpp" bodystart="803" bodyend="805"/>
      </memberdef>
      <memberdef kind="function" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1ad598f55cec78f2fbf65a27288a49556a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>item_hash_t</type>
        <definition>virtual item_hash_t steemit::app::detail::application_impl::get_head_block_id</definition>
        <argsstring>() const override</argsstring>
        <name>get_head_block_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="807" column="1" bodyfile="libraries/app/application.cpp" bodystart="807" bodyend="809"/>
      </memberdef>
      <memberdef kind="function" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1af0f4da8df1b36f849ac4bae88b34ff72" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>uint32_t</type>
        <definition>virtual uint32_t steemit::app::detail::application_impl::estimate_last_known_fork_from_git_revision_timestamp</definition>
        <argsstring>(uint32_t unix_timestamp) const override</argsstring>
        <name>estimate_last_known_fork_from_git_revision_timestamp</name>
        <param>
          <type>uint32_t</type>
          <declname>unix_timestamp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="811" column="1" bodyfile="libraries/app/application.cpp" bodystart="811" bodyend="813"/>
      </memberdef>
      <memberdef kind="function" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a574c4d44e79bac626423a648dcf076be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void steemit::app::detail::application_impl::error_encountered</definition>
        <argsstring>(const std::string &amp;message, const fc::oexception &amp;error) override</argsstring>
        <name>error_encountered</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <param>
          <type>const fc::oexception &amp;</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="815" column="1" bodyfile="libraries/app/application.cpp" bodystart="815" bodyend="817"/>
      </memberdef>
      <memberdef kind="function" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a202f56ac00a3a49a635a7615f9da071f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::app::detail::application_impl::get_max_block_age</definition>
        <argsstring>(int32_t &amp;result)</argsstring>
        <name>get_max_block_age</name>
        <param>
          <type>int32_t &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="819" column="1" bodyfile="libraries/app/application.cpp" bodystart="819" bodyend="822"/>
      </memberdef>
      <memberdef kind="function" id="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a378fa27c56fc6ae358e64bd02958b587" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::app::detail::application_impl::shutdown</definition>
        <argsstring>()</argsstring>
        <name>shutdown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/application.cpp" line="824" column="1" bodyfile="libraries/app/application.cpp" bodystart="824" bodyend="834"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="173">
        <label>steemit::app::detail::application_impl</label>
        <link refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl"/>
        <childnode refid="174" relation="public-inheritance">
        </childnode>
      </node>
      <node id="174">
        <label>graphene::net::node_delegate</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="178">
        <label>steemit::app::api_access</label>
        <link refid="d5/de0/structsteemit_1_1app_1_1api__access"/>
      </node>
      <node id="177">
        <label>steemit::app::application</label>
        <link refid="de/d5e/classsteemit_1_1app_1_1application"/>
      </node>
      <node id="175">
        <label>steemit::app::detail::application_impl</label>
        <link refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl"/>
        <childnode refid="176" relation="public-inheritance">
        </childnode>
        <childnode refid="177" relation="usage">
          <edgelabel>_self</edgelabel>
        </childnode>
        <childnode refid="178" relation="usage">
          <edgelabel>_apiaccess</edgelabel>
        </childnode>
      </node>
      <node id="176">
        <label>graphene::net::node_delegate</label>
      </node>
    </collaborationgraph>
    <location file="libraries/app/application.cpp" line="69" column="1" bodyfile="libraries/app/application.cpp" bodystart="69" bodyend="859"/>
    <listofallmembers>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a4682bee987068ffa378c289f06838431" prot="public" virt="non-virtual"><scope>steemit::app::detail::application_impl</scope><name>_api_factories_by_name</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1ad15e184770aaa20e3286fd6200f0e5cd" prot="public" virt="non-virtual"><scope>steemit::app::detail::application_impl</scope><name>_apiaccess</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a2f13dc6b6aa67462250ad4b718f3d332" prot="public" virt="non-virtual"><scope>steemit::app::detail::application_impl</scope><name>_chain_db</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a17f5914ac52fb17ca8475e002dadc23b" prot="public" virt="non-virtual"><scope>steemit::app::detail::application_impl</scope><name>_data_dir</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a3836944b78f4abc28fad65a65b8ab473" prot="public" virt="non-virtual"><scope>steemit::app::detail::application_impl</scope><name>_force_validate</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1ac564fdb361ea1ef14acb5894503a63e6" prot="public" virt="non-virtual"><scope>steemit::app::detail::application_impl</scope><name>_is_block_producer</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1acf92fce4358db60e97d15b3503b6d135" prot="public" virt="non-virtual"><scope>steemit::app::detail::application_impl</scope><name>_lock_file</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a4ce3d8cf06d5ca0ec4b365fc81beb62b" prot="public" virt="non-virtual"><scope>steemit::app::detail::application_impl</scope><name>_max_block_age</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a351e7c7d86bb706e9b6840abb4edad7d" prot="public" virt="non-virtual"><scope>steemit::app::detail::application_impl</scope><name>_options</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1ac478f9bd86f85c33297e067937794cde" prot="public" virt="non-virtual"><scope>steemit::app::detail::application_impl</scope><name>_p2p_network</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a287718cb03007d51f545565808136c11" prot="public" virt="non-virtual"><scope>steemit::app::detail::application_impl</scope><name>_plugins_available</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a4127f1edab6894c5faecad3ccf67a740" prot="public" virt="non-virtual"><scope>steemit::app::detail::application_impl</scope><name>_plugins_enabled</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1af10a9ec13335244f4e2b6c12afba6a81" prot="public" virt="non-virtual"><scope>steemit::app::detail::application_impl</scope><name>_public_apis</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1ac5d350346743b9a99f37ff2787ac25d8" prot="public" virt="non-virtual"><scope>steemit::app::detail::application_impl</scope><name>_running</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1ad47b14adeed0319f84588f503b321247" prot="public" virt="non-virtual"><scope>steemit::app::detail::application_impl</scope><name>_self</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a6a53282ce7a1b0b7d5b015b60769e921" prot="public" virt="non-virtual"><scope>steemit::app::detail::application_impl</scope><name>_shared_dir</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a17798605ea8dab16459d1ae4fa1d8bb7" prot="public" virt="non-virtual"><scope>steemit::app::detail::application_impl</scope><name>_shared_file_size</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1ad056e6107bc5b4e7ace7ec38a2dfc385" prot="public" virt="non-virtual"><scope>steemit::app::detail::application_impl</scope><name>_websocket_server</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1af917a5d69b7e09d7a62f85e18931a064" prot="public" virt="non-virtual"><scope>steemit::app::detail::application_impl</scope><name>_websocket_tls_server</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1ae31172abd11c89e090a5a964e0df3fd7" prot="public" virt="non-virtual"><scope>steemit::app::detail::application_impl</scope><name>allow_future_time</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a4312058c7c8f0631de73b5fe4c3a6f91" prot="public" virt="non-virtual"><scope>steemit::app::detail::application_impl</scope><name>application_impl</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1aaaa1ff832e0b86a447e6cfaacbf2ec66" prot="public" virt="virtual"><scope>steemit::app::detail::application_impl</scope><name>connection_count_changed</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1ac419c9f3f96b5e518a8d1bc25a302b19" prot="public" virt="non-virtual"><scope>steemit::app::detail::application_impl</scope><name>create_api_by_name</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a574c4d44e79bac626423a648dcf076be" prot="public" virt="virtual"><scope>steemit::app::detail::application_impl</scope><name>error_encountered</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1af0f4da8df1b36f849ac4bae88b34ff72" prot="public" virt="virtual"><scope>steemit::app::detail::application_impl</scope><name>estimate_last_known_fork_from_git_revision_timestamp</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1afdaf7e18985e8dd81a1c2b360f662156" prot="public" virt="non-virtual"><scope>steemit::app::detail::application_impl</scope><name>get_api_access_info</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1ae8b30d90fca5ece635d932cb81e9afe5" prot="public" virt="virtual"><scope>steemit::app::detail::application_impl</scope><name>get_block_ids</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1ac39432b8121c265ff56cf6fdebb6a267" prot="public" virt="virtual"><scope>steemit::app::detail::application_impl</scope><name>get_block_number</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a4ae0d3841eb29ecbf8f77459a65e2257" prot="public" virt="virtual"><scope>steemit::app::detail::application_impl</scope><name>get_block_time</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a8b1a9300dfea908827c69eb160e3b88d" prot="public" virt="virtual"><scope>steemit::app::detail::application_impl</scope><name>get_blockchain_now</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a953b9971e7e523b9a38ef3cd8524e167" prot="public" virt="virtual"><scope>steemit::app::detail::application_impl</scope><name>get_blockchain_synopsis</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1ad598f55cec78f2fbf65a27288a49556a" prot="public" virt="virtual"><scope>steemit::app::detail::application_impl</scope><name>get_head_block_id</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a52ea2173abc396d98017d5e933226e80" prot="public" virt="virtual"><scope>steemit::app::detail::application_impl</scope><name>get_item</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a202f56ac00a3a49a635a7615f9da071f" prot="public" virt="non-virtual"><scope>steemit::app::detail::application_impl</scope><name>get_max_block_age</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a42d0757e6ff0fb4b4ba51bfba853d960" prot="public" virt="virtual"><scope>steemit::app::detail::application_impl</scope><name>handle_block</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a9e3240ac0577124af7bb863a81507d76" prot="public" virt="virtual"><scope>steemit::app::detail::application_impl</scope><name>handle_message</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1ad3da61169da155185dfd9a2e302b2b79" prot="public" virt="virtual"><scope>steemit::app::detail::application_impl</scope><name>handle_transaction</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a5f85b572adcf23a26968afe05e08628f" prot="public" virt="virtual"><scope>steemit::app::detail::application_impl</scope><name>has_item</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1ac0bff9d48659914c1b708fbb2a1edfe0" prot="public" virt="non-virtual"><scope>steemit::app::detail::application_impl</scope><name>is_included_block</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a371b86112f200e65c18a492dc6afe1bd" prot="public" virt="non-virtual"><scope>steemit::app::detail::application_impl</scope><name>on_connection</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a7901ae02cb6099d15269b504370b2894" prot="public" virt="non-virtual"><scope>steemit::app::detail::application_impl</scope><name>register_api_factory</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a8a2427dd60af853be10f7d0b12093197" prot="public" virt="non-virtual"><scope>steemit::app::detail::application_impl</scope><name>register_builtin_apis</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a841d65fc5999ef6569bf651062e60032" prot="public" virt="non-virtual"><scope>steemit::app::detail::application_impl</scope><name>reset_p2p_node</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a3d5664fa0f199783c04369e314cbfb17" prot="public" virt="non-virtual"><scope>steemit::app::detail::application_impl</scope><name>reset_websocket_server</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1afb51c055f517a0ad44d744473db030ae" prot="public" virt="non-virtual"><scope>steemit::app::detail::application_impl</scope><name>reset_websocket_tls_server</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1aefd56a9ef9fcb4d2b09c0b90c9918514" prot="public" virt="non-virtual"><scope>steemit::app::detail::application_impl</scope><name>resolve_string_to_ip_endpoints</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1ac8283494f835a3fd535052eaed3ce692" prot="public" virt="non-virtual"><scope>steemit::app::detail::application_impl</scope><name>set_api_access_info</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a378fa27c56fc6ae358e64bd02958b587" prot="public" virt="non-virtual"><scope>steemit::app::detail::application_impl</scope><name>shutdown</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a45045ad57a849fcf180e4c5a6f58743d" prot="public" virt="non-virtual"><scope>steemit::app::detail::application_impl</scope><name>startup</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1a363b461d5abcdeb9d6a0dbedf38b26c8" prot="public" virt="virtual"><scope>steemit::app::detail::application_impl</scope><name>sync_status</name></member>
      <member refid="dd/d97/classsteemit_1_1app_1_1detail_1_1application__impl_1ad9253c72bbf051eacedb609f6981e17d" prot="public" virt="non-virtual"><scope>steemit::app::detail::application_impl</scope><name>~application_impl</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
