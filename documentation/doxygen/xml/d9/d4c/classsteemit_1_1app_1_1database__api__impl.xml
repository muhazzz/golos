<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="d9/d4c/classsteemit_1_1app_1_1database__api__impl" kind="class" language="C++" prot="public">
    <compoundname>steemit::app::database_api_impl</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::enable_shared_from_this&lt; database_api_impl &gt;</basecompoundref>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1ad339ecc6d3f903740a8de4ba415058b8" prot="public" static="no" mutable="yes">
        <type>fc::bloom_filter</type>
        <definition>fc::bloom_filter steemit::app::database_api_impl::_subscribe_filter</definition>
        <argsstring></argsstring>
        <name>_subscribe_filter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api.cpp" line="91" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1abc8c4ae67456362d97d559f8d8fd75ba" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const fc::variant &amp;)&gt;</type>
        <definition>std::function&lt;void(const fc::variant &amp;)&gt; steemit::app::database_api_impl::_subscribe_callback</definition>
        <argsstring></argsstring>
        <name>_subscribe_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api.cpp" line="92" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1aed12cfa567be708439cac270370ffcf4" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const fc::variant &amp;)&gt;</type>
        <definition>std::function&lt;void(const fc::variant &amp;)&gt; steemit::app::database_api_impl::_pending_trx_callback</definition>
        <argsstring></argsstring>
        <name>_pending_trx_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api.cpp" line="93" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1a604bbc05fac2beded850e3e8d8cd6770" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const fc::variant &amp;)&gt;</type>
        <definition>std::function&lt;void(const fc::variant &amp;)&gt; steemit::app::database_api_impl::_block_applied_callback</definition>
        <argsstring></argsstring>
        <name>_block_applied_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api.cpp" line="94" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1adb5962fe2ec1441220949e52a848b8dc" prot="public" static="no" mutable="no">
        <type><ref refid="da/d98/classsteemit_1_1chain_1_1database" kindref="compound">steemit::chain::database</ref> &amp;</type>
        <definition>steemit::chain::database&amp; steemit::app::database_api_impl::_db</definition>
        <argsstring></argsstring>
        <name>_db</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api.cpp" line="96" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1a9e902a84970e4b135c193407b55081f6" prot="public" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="df/d07/classsteemit_1_1follow_1_1follow__api" kindref="compound">steemit::follow::follow_api</ref> &gt;</type>
        <definition>std::shared_ptr&lt;steemit::follow::follow_api&gt; steemit::app::database_api_impl::_follow_api</definition>
        <argsstring></argsstring>
        <name>_follow_api</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api.cpp" line="97" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1a95ac47134219172a8095540854a88451" prot="public" static="no" mutable="no">
        <type>boost::signals2::scoped_connection</type>
        <definition>boost::signals2::scoped_connection steemit::app::database_api_impl::_block_applied_connection</definition>
        <argsstring></argsstring>
        <name>_block_applied_connection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api.cpp" line="99" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="99" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1a81e64f2ff61d1b07c04f960d2cfdc5a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>steemit::app::database_api_impl::database_api_impl</definition>
        <argsstring>(const steemit::app::api_context &amp;ctx)</argsstring>
        <name>database_api_impl</name>
        <param>
          <type>const <ref refid="d1/d23/structsteemit_1_1app_1_1api__context" kindref="compound">steemit::app::api_context</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api.cpp" line="24" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="197" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1a996ecf735e9a6968e0b789ca8699ac4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>steemit::app::database_api_impl::~database_api_impl</definition>
        <argsstring>()</argsstring>
        <name>~database_api_impl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api.cpp" line="26" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="210" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1ac9eb175e141c65b1fd52a70c4db0a6f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::app::database_api_impl::set_subscribe_callback</definition>
        <argsstring>(std::function&lt; void(const variant &amp;)&gt; cb, bool clear_filter)</argsstring>
        <name>set_subscribe_callback</name>
        <param>
          <type>std::function&lt; void(const variant &amp;)&gt;</type>
          <declname>cb</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>clear_filter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api.cpp" line="29" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="132" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1aa8efcbd2514c18b6276a3b47ae31df49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::app::database_api_impl::set_pending_transaction_callback</definition>
        <argsstring>(std::function&lt; void(const variant &amp;)&gt; cb)</argsstring>
        <name>set_pending_transaction_callback</name>
        <param>
          <type>std::function&lt; void(const variant &amp;)&gt;</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api.cpp" line="31" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="150" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1a4ba8c3e1f5ef506bc41751ee53f9be5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::app::database_api_impl::set_block_applied_callback</definition>
        <argsstring>(std::function&lt; void(const variant &amp;block_id)&gt; cb)</argsstring>
        <name>set_block_applied_callback</name>
        <param>
          <type>std::function&lt; void(const variant &amp;block_id)&gt;</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api.cpp" line="33" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="169" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1a6af23d7aacc39a3f66105a7a2b05ecf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::app::database_api_impl::cancel_all_subscriptions</definition>
        <argsstring>()</argsstring>
        <name>cancel_all_subscriptions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api.cpp" line="35" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="180" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1a401e65e79c98f70427dfee1a327709fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>optional&lt; block_header &gt;</type>
        <definition>optional&lt; block_header &gt; steemit::app::database_api_impl::get_block_header</definition>
        <argsstring>(uint32_t block_num) const</argsstring>
        <name>get_block_header</name>
        <param>
          <type>uint32_t</type>
          <declname>block_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api.cpp" line="38" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="229" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1a48fef1e3da15d8f0a0615b2dc1de839c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>optional&lt; signed_block &gt;</type>
        <definition>optional&lt; signed_block &gt; steemit::app::database_api_impl::get_block</definition>
        <argsstring>(uint32_t block_num) const</argsstring>
        <name>get_block</name>
        <param>
          <type>uint32_t</type>
          <declname>block_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api.cpp" line="40" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="243" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1adabc1f70dd520af8a52f22833f29d7e8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="d8/daf/structsteemit_1_1app_1_1applied__operation" kindref="compound">applied_operation</ref> &gt;</type>
        <definition>std::vector&lt; applied_operation &gt; steemit::app::database_api_impl::get_ops_in_block</definition>
        <argsstring>(uint32_t block_num, bool only_virtual) const</argsstring>
        <name>get_ops_in_block</name>
        <param>
          <type>uint32_t</type>
          <declname>block_num</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>only_virtual</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api.cpp" line="42" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="253" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1a62afcacf35c441741a593db9d62e7ff6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>fc::variant_object</type>
        <definition>fc::variant_object steemit::app::database_api_impl::get_config</definition>
        <argsstring>() const</argsstring>
        <name>get_config</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api.cpp" line="45" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="281" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1af663a6b59d68181b2329afd44c77d444" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="df/d55/namespacesteemit_1_1app_1ae11bc8c13f6f1de6f093122ce6a22c50" kindref="member">dynamic_global_property_api_obj</ref></type>
        <definition>dynamic_global_property_api_obj steemit::app::database_api_impl::get_dynamic_global_properties</definition>
        <argsstring>() const</argsstring>
        <name>get_dynamic_global_properties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api.cpp" line="47" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="309" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1ac435aebb6ca3f4b10278510849e56586" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::set&lt; std::string &gt; &gt;</type>
        <definition>std::vector&lt; std::set&lt; std::string &gt; &gt; steemit::app::database_api_impl::get_key_references</definition>
        <argsstring>(std::vector&lt; public_key_type &gt; key) const</argsstring>
        <name>get_key_references</name>
        <param>
          <type>std::vector&lt; public_key_type &gt;</type>
          <declname>key</declname>
          <defname>keys</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>all accounts that referr to the key or account id in their owner or active authorities. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api.cpp" line="50" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="350" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1ae0ab8106db2b02d96aea122c1a08ffcf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="d7/d2e/structsteemit_1_1app_1_1extended__account" kindref="compound">extended_account</ref> &gt;</type>
        <definition>std::vector&lt; extended_account &gt; steemit::app::database_api_impl::get_accounts</definition>
        <argsstring>(std::vector&lt; std::string &gt; names) const</argsstring>
        <name>get_accounts</name>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>names</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api.cpp" line="53" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="368" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1a79eb8adeec4f230ccb0fd53e689cbbda" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="d8/d9b/namespacesteemit_1_1chain_1aa381fbe5f22b4abc90a719e5f59c842f" kindref="member">account_id_type</ref> &gt;</type>
        <definition>std::vector&lt; account_id_type &gt; steemit::app::database_api_impl::get_account_references</definition>
        <argsstring>(account_id_type account_id) const</argsstring>
        <name>get_account_references</name>
        <param>
          <type><ref refid="d8/d9b/namespacesteemit_1_1chain_1aa381fbe5f22b4abc90a719e5f59c842f" kindref="member">account_id_type</ref></type>
          <declname>account_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api.cpp" line="55" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="399" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1ad0dbc88d933228a1a45af637c5c1630e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; optional&lt; <ref refid="da/d55/structsteemit_1_1app_1_1account__api__obj" kindref="compound">account_api_obj</ref> &gt; &gt;</type>
        <definition>std::vector&lt; optional&lt; account_api_obj &gt; &gt; steemit::app::database_api_impl::lookup_account_names</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;account_names) const</argsstring>
        <name>lookup_account_names</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>account_names</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api.cpp" line="57" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="421" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1a904319fa3cff420c2013fc4b98629b16" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::set&lt; std::string &gt;</type>
        <definition>std::set&lt; std::string &gt; steemit::app::database_api_impl::lookup_accounts</definition>
        <argsstring>(const std::string &amp;lower_bound_name, uint32_t limit) const</argsstring>
        <name>lookup_accounts</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>lower_bound_name</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api.cpp" line="59" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="444" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1aabbb934f56827f963f5225888911d980" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t steemit::app::database_api_impl::get_account_count</definition>
        <argsstring>() const</argsstring>
        <name>get_account_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api.cpp" line="61" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="464" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1aae95e090d82c828e576a9a903d8080f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; optional&lt; <ref refid="d9/d84/structsteemit_1_1app_1_1witness__api__obj" kindref="compound">witness_api_obj</ref> &gt; &gt;</type>
        <definition>std::vector&lt; optional&lt; witness_api_obj &gt; &gt; steemit::app::database_api_impl::get_witnesses</definition>
        <argsstring>(const std::vector&lt; witness_id_type &gt; &amp;witness_ids) const</argsstring>
        <name>get_witnesses</name>
        <param>
          <type>const std::vector&lt; <ref refid="d8/d9b/namespacesteemit_1_1chain_1aa0f93539a0ca722847f4c0aac79bd9a6" kindref="member">witness_id_type</ref> &gt; &amp;</type>
          <declname>witness_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api.cpp" line="64" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="581" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1a3390a87423ffa1da155660c94eaf7df3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>fc::optional&lt; <ref refid="d9/d84/structsteemit_1_1app_1_1witness__api__obj" kindref="compound">witness_api_obj</ref> &gt;</type>
        <definition>fc::optional&lt; witness_api_obj &gt; steemit::app::database_api_impl::get_witness_by_account</definition>
        <argsstring>(std::string account_name) const</argsstring>
        <name>get_witness_by_account</name>
        <param>
          <type>std::string</type>
          <declname>account_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api.cpp" line="66" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="629" bodyend="636"/>
      </memberdef>
      <memberdef kind="function" id="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1ad7b8c90d043293d0e1a8aa45f371b115" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::set&lt; account_name_type &gt;</type>
        <definition>std::set&lt; account_name_type &gt; steemit::app::database_api_impl::lookup_witness_accounts</definition>
        <argsstring>(const std::string &amp;lower_bound_name, uint32_t limit) const</argsstring>
        <name>lookup_witness_accounts</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>lower_bound_name</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api.cpp" line="68" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="644" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1a1a511344107f3c98f10942f86343e72d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t steemit::app::database_api_impl::get_witness_count</definition>
        <argsstring>() const</argsstring>
        <name>get_witness_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api.cpp" line="70" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="673" bodyend="675"/>
      </memberdef>
      <memberdef kind="function" id="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1a3cc5954e74300dc3dc3176c7951c4942" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d8/d8d/structsteemit_1_1app_1_1order__book" kindref="compound">order_book</ref></type>
        <definition>order_book steemit::app::database_api_impl::get_order_book</definition>
        <argsstring>(uint32_t limit) const</argsstring>
        <name>get_order_book</name>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api.cpp" line="73" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="708" bodyend="754"/>
      </memberdef>
      <memberdef kind="function" id="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1ae67a24185ee63b91dd0ee0487c645bda" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="d1/d3c/structsteemit_1_1app_1_1liquidity__balance" kindref="compound">liquidity_balance</ref> &gt;</type>
        <definition>std::vector&lt; liquidity_balance &gt; steemit::app::database_api_impl::get_liquidity_queue</definition>
        <argsstring>(std::string start_account, uint32_t limit) const</argsstring>
        <name>get_liquidity_queue</name>
        <param>
          <type>std::string</type>
          <declname>start_account</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api.cpp" line="75" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="762" bodyend="792"/>
      </memberdef>
      <memberdef kind="function" id="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1afd0c3408e7daf70bd63c6bf87cfad85c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string steemit::app::database_api_impl::get_transaction_hex</definition>
        <argsstring>(const signed_transaction &amp;trx) const</argsstring>
        <name>get_transaction_hex</name>
        <param>
          <type>const signed_transaction &amp;</type>
          <declname>trx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api.cpp" line="78" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="806" bodyend="808"/>
      </memberdef>
      <memberdef kind="function" id="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1afd5da65dc0817b730da58fc629247133" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::set&lt; public_key_type &gt;</type>
        <definition>std::set&lt; public_key_type &gt; steemit::app::database_api_impl::get_required_signatures</definition>
        <argsstring>(const signed_transaction &amp;trx, const flat_set&lt; public_key_type &gt; &amp;available_keys) const</argsstring>
        <name>get_required_signatures</name>
        <param>
          <type>const signed_transaction &amp;</type>
          <declname>trx</declname>
        </param>
        <param>
          <type>const flat_set&lt; public_key_type &gt; &amp;</type>
          <declname>available_keys</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api.cpp" line="80" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="816" bodyend="826"/>
      </memberdef>
      <memberdef kind="function" id="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1a83a55e055dee2ef30ca67346c8313be8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::set&lt; public_key_type &gt;</type>
        <definition>std::set&lt; public_key_type &gt; steemit::app::database_api_impl::get_potential_signatures</definition>
        <argsstring>(const signed_transaction &amp;trx) const</argsstring>
        <name>get_potential_signatures</name>
        <param>
          <type>const signed_transaction &amp;</type>
          <declname>trx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api.cpp" line="82" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="834" bodyend="866"/>
      </memberdef>
      <memberdef kind="function" id="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1a608d04cdb2e5685fbb4073b55bf6da8a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool steemit::app::database_api_impl::verify_authority</definition>
        <argsstring>(const signed_transaction &amp;trx) const</argsstring>
        <name>verify_authority</name>
        <param>
          <type>const signed_transaction &amp;</type>
          <declname>trx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api.cpp" line="84" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="874" bodyend="881"/>
      </memberdef>
      <memberdef kind="function" id="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1a572186c925c41fe5c2f028c983ea4d8c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool steemit::app::database_api_impl::verify_account_authority</definition>
        <argsstring>(const std::string &amp;name_or_id, const flat_set&lt; public_key_type &gt; &amp;signers) const</argsstring>
        <name>verify_account_authority</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name_or_id</declname>
        </param>
        <param>
          <type>const flat_set&lt; public_key_type &gt; &amp;</type>
          <declname>signers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>reuse trx.verify_authority by creating a dummy transfer </para>        </inbodydescription>
        <location file="libraries/app/database_api.cpp" line="86" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="889" bodyend="901"/>
      </memberdef>
      <memberdef kind="function" id="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1a70a7f48f169fea65bfbff023c1d01269" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::app::database_api_impl::on_applied_block</definition>
        <argsstring>(const chain::signed_block &amp;b)</argsstring>
        <name>on_applied_block</name>
        <param>
          <type>const chain::signed_block &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/database_api.cpp" line="89" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="160" bodyend="167"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="431">
        <label>steemit::app::database_api_impl</label>
        <link refid="d9/d4c/classsteemit_1_1app_1_1database__api__impl"/>
        <childnode refid="432" relation="public-inheritance">
        </childnode>
      </node>
      <node id="432">
        <label>std::enable_shared_from_this&lt; database_api_impl &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="433">
        <label>steemit::app::database_api_impl</label>
        <link refid="d9/d4c/classsteemit_1_1app_1_1database__api__impl"/>
        <childnode refid="434" relation="public-inheritance">
        </childnode>
        <childnode refid="435" relation="usage">
          <edgelabel>_db</edgelabel>
        </childnode>
      </node>
      <node id="435">
        <label>steemit::chain::database</label>
        <link refid="da/d98/classsteemit_1_1chain_1_1database"/>
        <childnode refid="436" relation="public-inheritance">
        </childnode>
      </node>
      <node id="436">
        <label>chainbase::database</label>
      </node>
      <node id="434">
        <label>std::enable_shared_from_this&lt; database_api_impl &gt;</label>
      </node>
    </collaborationgraph>
    <location file="libraries/app/database_api.cpp" line="22" column="1" bodyfile="libraries/app/database_api.cpp" bodystart="21" bodyend="100"/>
    <listofallmembers>
      <member refid="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1a604bbc05fac2beded850e3e8d8cd6770" prot="public" virt="non-virtual"><scope>steemit::app::database_api_impl</scope><name>_block_applied_callback</name></member>
      <member refid="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1a95ac47134219172a8095540854a88451" prot="public" virt="non-virtual"><scope>steemit::app::database_api_impl</scope><name>_block_applied_connection</name></member>
      <member refid="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1adb5962fe2ec1441220949e52a848b8dc" prot="public" virt="non-virtual"><scope>steemit::app::database_api_impl</scope><name>_db</name></member>
      <member refid="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1a9e902a84970e4b135c193407b55081f6" prot="public" virt="non-virtual"><scope>steemit::app::database_api_impl</scope><name>_follow_api</name></member>
      <member refid="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1aed12cfa567be708439cac270370ffcf4" prot="public" virt="non-virtual"><scope>steemit::app::database_api_impl</scope><name>_pending_trx_callback</name></member>
      <member refid="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1abc8c4ae67456362d97d559f8d8fd75ba" prot="public" virt="non-virtual"><scope>steemit::app::database_api_impl</scope><name>_subscribe_callback</name></member>
      <member refid="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1ad339ecc6d3f903740a8de4ba415058b8" prot="public" virt="non-virtual"><scope>steemit::app::database_api_impl</scope><name>_subscribe_filter</name></member>
      <member refid="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1a6af23d7aacc39a3f66105a7a2b05ecf4" prot="public" virt="non-virtual"><scope>steemit::app::database_api_impl</scope><name>cancel_all_subscriptions</name></member>
      <member refid="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1a81e64f2ff61d1b07c04f960d2cfdc5a1" prot="public" virt="non-virtual"><scope>steemit::app::database_api_impl</scope><name>database_api_impl</name></member>
      <member refid="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1aabbb934f56827f963f5225888911d980" prot="public" virt="non-virtual"><scope>steemit::app::database_api_impl</scope><name>get_account_count</name></member>
      <member refid="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1a79eb8adeec4f230ccb0fd53e689cbbda" prot="public" virt="non-virtual"><scope>steemit::app::database_api_impl</scope><name>get_account_references</name></member>
      <member refid="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1ae0ab8106db2b02d96aea122c1a08ffcf" prot="public" virt="non-virtual"><scope>steemit::app::database_api_impl</scope><name>get_accounts</name></member>
      <member refid="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1a48fef1e3da15d8f0a0615b2dc1de839c" prot="public" virt="non-virtual"><scope>steemit::app::database_api_impl</scope><name>get_block</name></member>
      <member refid="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1a401e65e79c98f70427dfee1a327709fe" prot="public" virt="non-virtual"><scope>steemit::app::database_api_impl</scope><name>get_block_header</name></member>
      <member refid="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1a62afcacf35c441741a593db9d62e7ff6" prot="public" virt="non-virtual"><scope>steemit::app::database_api_impl</scope><name>get_config</name></member>
      <member refid="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1af663a6b59d68181b2329afd44c77d444" prot="public" virt="non-virtual"><scope>steemit::app::database_api_impl</scope><name>get_dynamic_global_properties</name></member>
      <member refid="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1ac435aebb6ca3f4b10278510849e56586" prot="public" virt="non-virtual"><scope>steemit::app::database_api_impl</scope><name>get_key_references</name></member>
      <member refid="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1ae67a24185ee63b91dd0ee0487c645bda" prot="public" virt="non-virtual"><scope>steemit::app::database_api_impl</scope><name>get_liquidity_queue</name></member>
      <member refid="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1adabc1f70dd520af8a52f22833f29d7e8" prot="public" virt="non-virtual"><scope>steemit::app::database_api_impl</scope><name>get_ops_in_block</name></member>
      <member refid="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1a3cc5954e74300dc3dc3176c7951c4942" prot="public" virt="non-virtual"><scope>steemit::app::database_api_impl</scope><name>get_order_book</name></member>
      <member refid="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1a83a55e055dee2ef30ca67346c8313be8" prot="public" virt="non-virtual"><scope>steemit::app::database_api_impl</scope><name>get_potential_signatures</name></member>
      <member refid="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1afd5da65dc0817b730da58fc629247133" prot="public" virt="non-virtual"><scope>steemit::app::database_api_impl</scope><name>get_required_signatures</name></member>
      <member refid="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1afd0c3408e7daf70bd63c6bf87cfad85c" prot="public" virt="non-virtual"><scope>steemit::app::database_api_impl</scope><name>get_transaction_hex</name></member>
      <member refid="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1a3390a87423ffa1da155660c94eaf7df3" prot="public" virt="non-virtual"><scope>steemit::app::database_api_impl</scope><name>get_witness_by_account</name></member>
      <member refid="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1a1a511344107f3c98f10942f86343e72d" prot="public" virt="non-virtual"><scope>steemit::app::database_api_impl</scope><name>get_witness_count</name></member>
      <member refid="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1aae95e090d82c828e576a9a903d8080f1" prot="public" virt="non-virtual"><scope>steemit::app::database_api_impl</scope><name>get_witnesses</name></member>
      <member refid="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1ad0dbc88d933228a1a45af637c5c1630e" prot="public" virt="non-virtual"><scope>steemit::app::database_api_impl</scope><name>lookup_account_names</name></member>
      <member refid="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1a904319fa3cff420c2013fc4b98629b16" prot="public" virt="non-virtual"><scope>steemit::app::database_api_impl</scope><name>lookup_accounts</name></member>
      <member refid="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1ad7b8c90d043293d0e1a8aa45f371b115" prot="public" virt="non-virtual"><scope>steemit::app::database_api_impl</scope><name>lookup_witness_accounts</name></member>
      <member refid="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1a70a7f48f169fea65bfbff023c1d01269" prot="public" virt="non-virtual"><scope>steemit::app::database_api_impl</scope><name>on_applied_block</name></member>
      <member refid="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1a4ba8c3e1f5ef506bc41751ee53f9be5f" prot="public" virt="non-virtual"><scope>steemit::app::database_api_impl</scope><name>set_block_applied_callback</name></member>
      <member refid="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1aa8efcbd2514c18b6276a3b47ae31df49" prot="public" virt="non-virtual"><scope>steemit::app::database_api_impl</scope><name>set_pending_transaction_callback</name></member>
      <member refid="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1ac9eb175e141c65b1fd52a70c4db0a6f6" prot="public" virt="non-virtual"><scope>steemit::app::database_api_impl</scope><name>set_subscribe_callback</name></member>
      <member refid="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1a572186c925c41fe5c2f028c983ea4d8c" prot="public" virt="non-virtual"><scope>steemit::app::database_api_impl</scope><name>verify_account_authority</name></member>
      <member refid="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1a608d04cdb2e5685fbb4073b55bf6da8a" prot="public" virt="non-virtual"><scope>steemit::app::database_api_impl</scope><name>verify_authority</name></member>
      <member refid="d9/d4c/classsteemit_1_1app_1_1database__api__impl_1a996ecf735e9a6968e0b789ca8699ac4c" prot="public" virt="non-virtual"><scope>steemit::app::database_api_impl</scope><name>~database_api_impl</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
