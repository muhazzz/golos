<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="db/d70/structsteemit_1_1chain_1_1shared__authority" kind="struct" language="C++" prot="public">
    <compoundname>steemit::chain::shared_authority</compoundname>
    <includes refid="df/dd8/shared__authority_8hpp" local="no">shared_authority.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="db/d70/structsteemit_1_1chain_1_1shared__authority_1a3ac399c254cb017b78e116ef49123ece" prot="public" static="no">
        <type>bip::allocator&lt; <ref refid="db/d70/structsteemit_1_1chain_1_1shared__authority" kindref="compound">shared_authority</ref>, bip::managed_mapped_file::segment_manager &gt;</type>
        <definition>typedef bip::allocator&lt;shared_authority, bip::managed_mapped_file::segment_manager&gt; steemit::chain::shared_authority::allocator_type</definition>
        <argsstring></argsstring>
        <name>allocator_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/shared_authority.hpp" line="89" column="1" bodyfile="libraries/chain/include/steemit/chain/shared_authority.hpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="db/d70/structsteemit_1_1chain_1_1shared__authority_1a2e13f7c5ef1e0a0f2f9681ac1d63be2f" prot="public" static="no">
        <type>bip::allocator&lt; std::pair&lt; account_name_type, weight_type &gt;, bip::managed_mapped_file::segment_manager &gt;</type>
        <definition>typedef bip::allocator&lt;std::pair&lt;account_name_type, weight_type&gt;, bip::managed_mapped_file::segment_manager&gt; steemit::chain::shared_authority::account_pair_allocator_type</definition>
        <argsstring></argsstring>
        <name>account_pair_allocator_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/shared_authority.hpp" line="91" column="1" bodyfile="libraries/chain/include/steemit/chain/shared_authority.hpp" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="db/d70/structsteemit_1_1chain_1_1shared__authority_1ab06b78cbc835080395b87c972b33102b" prot="public" static="no">
        <type>bip::allocator&lt; std::pair&lt; public_key_type, weight_type &gt;, bip::managed_mapped_file::segment_manager &gt;</type>
        <definition>typedef bip::allocator&lt;std::pair&lt;public_key_type, weight_type&gt;, bip::managed_mapped_file::segment_manager&gt; steemit::chain::shared_authority::key_pair_allocator_type</definition>
        <argsstring></argsstring>
        <name>key_pair_allocator_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/shared_authority.hpp" line="92" column="1" bodyfile="libraries/chain/include/steemit/chain/shared_authority.hpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="db/d70/structsteemit_1_1chain_1_1shared__authority_1a63deae9b91f07dcc010a6461cca86387" prot="public" static="no">
        <type>bip::flat_map&lt; account_name_type, weight_type, protocol::string_less, <ref refid="db/d70/structsteemit_1_1chain_1_1shared__authority_1a2e13f7c5ef1e0a0f2f9681ac1d63be2f" kindref="member">account_pair_allocator_type</ref> &gt;</type>
        <definition>typedef bip::flat_map&lt;account_name_type, weight_type, protocol::string_less, account_pair_allocator_type&gt; steemit::chain::shared_authority::account_authority_map</definition>
        <argsstring></argsstring>
        <name>account_authority_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/shared_authority.hpp" line="94" column="1" bodyfile="libraries/chain/include/steemit/chain/shared_authority.hpp" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="db/d70/structsteemit_1_1chain_1_1shared__authority_1ab2f050f92107b2f14947233a12e72569" prot="public" static="no">
        <type>bip::flat_map&lt; public_key_type, weight_type, std::less&lt; public_key_type &gt;, <ref refid="db/d70/structsteemit_1_1chain_1_1shared__authority_1ab06b78cbc835080395b87c972b33102b" kindref="member">key_pair_allocator_type</ref> &gt;</type>
        <definition>typedef bip::flat_map&lt;public_key_type, weight_type, std::less&lt;public_key_type&gt;, key_pair_allocator_type&gt; steemit::chain::shared_authority::key_authority_map</definition>
        <argsstring></argsstring>
        <name>key_authority_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/shared_authority.hpp" line="95" column="1" bodyfile="libraries/chain/include/steemit/chain/shared_authority.hpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="db/d70/structsteemit_1_1chain_1_1shared__authority_1a6d630e8fc9d77d1409c7ca7286527808" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t steemit::chain::shared_authority::weight_threshold</definition>
        <argsstring></argsstring>
        <name>weight_threshold</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/shared_authority.hpp" line="97" column="1" bodyfile="libraries/chain/include/steemit/chain/shared_authority.hpp" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db/d70/structsteemit_1_1chain_1_1shared__authority_1afcb75895eab0dd8d50696ade529ae838" prot="public" static="no" mutable="no">
        <type><ref refid="db/d70/structsteemit_1_1chain_1_1shared__authority_1a63deae9b91f07dcc010a6461cca86387" kindref="member">account_authority_map</ref></type>
        <definition>account_authority_map steemit::chain::shared_authority::account_auths</definition>
        <argsstring></argsstring>
        <name>account_auths</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/shared_authority.hpp" line="98" column="1" bodyfile="libraries/chain/include/steemit/chain/shared_authority.hpp" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db/d70/structsteemit_1_1chain_1_1shared__authority_1aa83e45d829441962af144f288e52be7e" prot="public" static="no" mutable="no">
        <type><ref refid="db/d70/structsteemit_1_1chain_1_1shared__authority_1ab2f050f92107b2f14947233a12e72569" kindref="member">key_authority_map</ref></type>
        <definition>key_authority_map steemit::chain::shared_authority::key_auths</definition>
        <argsstring></argsstring>
        <name>key_auths</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/shared_authority.hpp" line="99" column="1" bodyfile="libraries/chain/include/steemit/chain/shared_authority.hpp" bodystart="99" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="db/d70/structsteemit_1_1chain_1_1shared__authority_1a2e3972a5d9b688e8e9d32408f7963eea" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>steemit::chain::shared_authority::shared_authority</definition>
        <argsstring>()=delete</argsstring>
        <name>shared_authority</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/shared_authority.hpp" line="22" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="db/d70/structsteemit_1_1chain_1_1shared__authority_1a92c43193b41abeffd3f817890b6441e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Allocator</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>steemit::chain::shared_authority::shared_authority</definition>
        <argsstring>(const authority &amp;a, const Allocator &amp;alloc)</argsstring>
        <name>shared_authority</name>
        <param>
          <type>const authority &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Allocator &amp;</type>
          <declname>alloc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/shared_authority.hpp" line="26" column="1" bodyfile="libraries/chain/include/steemit/chain/shared_authority.hpp" bodystart="26" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="db/d70/structsteemit_1_1chain_1_1shared__authority_1afc9efd7e63469f91deda5e71b857e261" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>steemit::chain::shared_authority::shared_authority</definition>
        <argsstring>(const shared_authority &amp;cpy)</argsstring>
        <name>shared_authority</name>
        <param>
          <type>const <ref refid="db/d70/structsteemit_1_1chain_1_1shared__authority" kindref="compound">shared_authority</ref> &amp;</type>
          <declname>cpy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/shared_authority.hpp" line="40" column="1" bodyfile="libraries/chain/include/steemit/chain/shared_authority.hpp" bodystart="40" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="db/d70/structsteemit_1_1chain_1_1shared__authority_1a55bf67660a4a826bc3bada2497d3519f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Allocator</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>steemit::chain::shared_authority::shared_authority</definition>
        <argsstring>(const Allocator &amp;alloc)</argsstring>
        <name>shared_authority</name>
        <param>
          <type>const Allocator &amp;</type>
          <declname>alloc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/shared_authority.hpp" line="46" column="1" bodyfile="libraries/chain/include/steemit/chain/shared_authority.hpp" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="db/d70/structsteemit_1_1chain_1_1shared__authority_1a95d9d7bfbe8d26691cf77b33fab6b6af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Allocator</type>
          </param>
          <param>
            <type>class ...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>steemit::chain::shared_authority::shared_authority</definition>
        <argsstring>(const Allocator &amp;alloc, uint32_t weight_threshold, Args... auths)</argsstring>
        <name>shared_authority</name>
        <param>
          <type>const Allocator &amp;</type>
          <declname>alloc</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>weight_threshold</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>auths</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/shared_authority.hpp" line="52" column="1" bodyfile="libraries/chain/include/steemit/chain/shared_authority.hpp" bodystart="52" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="db/d70/structsteemit_1_1chain_1_1shared__authority_1ae235c4751591c373532d43217ddca51a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>steemit::chain::shared_authority::operator authority</definition>
        <argsstring>() const</argsstring>
        <name>operator authority</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/shared_authority.hpp" line="60" column="1" bodyfile="libraries/chain/shared_authority.cpp" bodystart="6" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="db/d70/structsteemit_1_1chain_1_1shared__authority_1a0ef915291cac28d9cdf4f8ba295aa648" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="db/d70/structsteemit_1_1chain_1_1shared__authority" kindref="compound">shared_authority</ref> &amp;</type>
        <definition>shared_authority &amp; steemit::chain::shared_authority::operator=</definition>
        <argsstring>(const authority &amp;a)</argsstring>
        <name>operator=</name>
        <param>
          <type>const authority &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/shared_authority.hpp" line="62" column="1" bodyfile="libraries/chain/shared_authority.cpp" bodystart="24" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="db/d70/structsteemit_1_1chain_1_1shared__authority_1a1adc59c6869abd1f3bdbea555c91a271" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::shared_authority::add_authority</definition>
        <argsstring>(const public_key_type &amp;k, weight_type w)</argsstring>
        <name>add_authority</name>
        <param>
          <type>const public_key_type &amp;</type>
          <declname>k</declname>
        </param>
        <param>
          <type>weight_type</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/shared_authority.hpp" line="64" column="1" bodyfile="libraries/chain/shared_authority.cpp" bodystart="40" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="db/d70/structsteemit_1_1chain_1_1shared__authority_1a31403120802026cc970d918c68e3d344" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::shared_authority::add_authority</definition>
        <argsstring>(const account_name_type &amp;k, weight_type w)</argsstring>
        <name>add_authority</name>
        <param>
          <type>const account_name_type &amp;</type>
          <declname>k</declname>
        </param>
        <param>
          <type>weight_type</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/shared_authority.hpp" line="66" column="1" bodyfile="libraries/chain/shared_authority.cpp" bodystart="44" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="db/d70/structsteemit_1_1chain_1_1shared__authority_1a42544dcdcde76860be753aa69c4f6497" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename AuthType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void steemit::chain::shared_authority::add_authorities</definition>
        <argsstring>(AuthType k, weight_type w)</argsstring>
        <name>add_authorities</name>
        <param>
          <type>AuthType</type>
          <declname>k</declname>
        </param>
        <param>
          <type>weight_type</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/shared_authority.hpp" line="69" column="1" bodyfile="libraries/chain/include/steemit/chain/shared_authority.hpp" bodystart="69" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="db/d70/structsteemit_1_1chain_1_1shared__authority_1a06cd80c09f04849486eec1d46b2cc9ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename AuthType</type>
          </param>
          <param>
            <type>class ...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void steemit::chain::shared_authority::add_authorities</definition>
        <argsstring>(AuthType k, weight_type w, Args... auths)</argsstring>
        <name>add_authorities</name>
        <param>
          <type>AuthType</type>
          <declname>k</declname>
        </param>
        <param>
          <type>weight_type</type>
          <declname>w</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>auths</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/shared_authority.hpp" line="74" column="1" bodyfile="libraries/chain/include/steemit/chain/shared_authority.hpp" bodystart="74" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="db/d70/structsteemit_1_1chain_1_1shared__authority_1a1e13df7915ea51383b5155527208df56" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; public_key_type &gt;</type>
        <definition>vector&lt; public_key_type &gt; steemit::chain::shared_authority::get_keys</definition>
        <argsstring>() const</argsstring>
        <name>get_keys</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/shared_authority.hpp" line="79" column="1" bodyfile="libraries/chain/shared_authority.cpp" bodystart="48" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="db/d70/structsteemit_1_1chain_1_1shared__authority_1a0c20884fcf43d3702585c9d4dacd7418" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool steemit::chain::shared_authority::is_impossible</definition>
        <argsstring>() const</argsstring>
        <name>is_impossible</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/shared_authority.hpp" line="81" column="1" bodyfile="libraries/chain/shared_authority.cpp" bodystart="57" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="db/d70/structsteemit_1_1chain_1_1shared__authority_1a6dedaec9e1faa109a1da935197f67cf1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t steemit::chain::shared_authority::num_auths</definition>
        <argsstring>() const</argsstring>
        <name>num_auths</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/shared_authority.hpp" line="83" column="1" bodyfile="libraries/chain/shared_authority.cpp" bodystart="68" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="db/d70/structsteemit_1_1chain_1_1shared__authority_1ae9d045d176b571aa9d2ee6de621a9962" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::shared_authority::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/shared_authority.hpp" line="85" column="1" bodyfile="libraries/chain/shared_authority.cpp" bodystart="72" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="db/d70/structsteemit_1_1chain_1_1shared__authority_1ace535e99db3fc0ca29f47ee142c42caf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::shared_authority::validate</definition>
        <argsstring>() const</argsstring>
        <name>validate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/shared_authority.hpp" line="87" column="1" bodyfile="libraries/chain/shared_authority.cpp" bodystart="77" bodyend="81"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The purpose of this class is to represent an authority object in a manner compatiable with shared memory storage. This requires all dynamic fields to be allocated with the same allocator that allocated the <ref refid="db/d70/structsteemit_1_1chain_1_1shared__authority" kindref="compound">shared_authority</ref>. </para>    </detaileddescription>
    <location file="libraries/chain/include/steemit/chain/shared_authority.hpp" line="20" column="1" bodyfile="libraries/chain/include/steemit/chain/shared_authority.hpp" bodystart="20" bodyend="100"/>
    <listofallmembers>
      <member refid="db/d70/structsteemit_1_1chain_1_1shared__authority_1a63deae9b91f07dcc010a6461cca86387" prot="public" virt="non-virtual"><scope>steemit::chain::shared_authority</scope><name>account_authority_map</name></member>
      <member refid="db/d70/structsteemit_1_1chain_1_1shared__authority_1afcb75895eab0dd8d50696ade529ae838" prot="public" virt="non-virtual"><scope>steemit::chain::shared_authority</scope><name>account_auths</name></member>
      <member refid="db/d70/structsteemit_1_1chain_1_1shared__authority_1a2e13f7c5ef1e0a0f2f9681ac1d63be2f" prot="public" virt="non-virtual"><scope>steemit::chain::shared_authority</scope><name>account_pair_allocator_type</name></member>
      <member refid="db/d70/structsteemit_1_1chain_1_1shared__authority_1a42544dcdcde76860be753aa69c4f6497" prot="public" virt="non-virtual"><scope>steemit::chain::shared_authority</scope><name>add_authorities</name></member>
      <member refid="db/d70/structsteemit_1_1chain_1_1shared__authority_1a06cd80c09f04849486eec1d46b2cc9ca" prot="public" virt="non-virtual"><scope>steemit::chain::shared_authority</scope><name>add_authorities</name></member>
      <member refid="db/d70/structsteemit_1_1chain_1_1shared__authority_1a1adc59c6869abd1f3bdbea555c91a271" prot="public" virt="non-virtual"><scope>steemit::chain::shared_authority</scope><name>add_authority</name></member>
      <member refid="db/d70/structsteemit_1_1chain_1_1shared__authority_1a31403120802026cc970d918c68e3d344" prot="public" virt="non-virtual"><scope>steemit::chain::shared_authority</scope><name>add_authority</name></member>
      <member refid="db/d70/structsteemit_1_1chain_1_1shared__authority_1a3ac399c254cb017b78e116ef49123ece" prot="public" virt="non-virtual"><scope>steemit::chain::shared_authority</scope><name>allocator_type</name></member>
      <member refid="db/d70/structsteemit_1_1chain_1_1shared__authority_1ae9d045d176b571aa9d2ee6de621a9962" prot="public" virt="non-virtual"><scope>steemit::chain::shared_authority</scope><name>clear</name></member>
      <member refid="db/d70/structsteemit_1_1chain_1_1shared__authority_1a1e13df7915ea51383b5155527208df56" prot="public" virt="non-virtual"><scope>steemit::chain::shared_authority</scope><name>get_keys</name></member>
      <member refid="db/d70/structsteemit_1_1chain_1_1shared__authority_1a0c20884fcf43d3702585c9d4dacd7418" prot="public" virt="non-virtual"><scope>steemit::chain::shared_authority</scope><name>is_impossible</name></member>
      <member refid="db/d70/structsteemit_1_1chain_1_1shared__authority_1ab2f050f92107b2f14947233a12e72569" prot="public" virt="non-virtual"><scope>steemit::chain::shared_authority</scope><name>key_authority_map</name></member>
      <member refid="db/d70/structsteemit_1_1chain_1_1shared__authority_1aa83e45d829441962af144f288e52be7e" prot="public" virt="non-virtual"><scope>steemit::chain::shared_authority</scope><name>key_auths</name></member>
      <member refid="db/d70/structsteemit_1_1chain_1_1shared__authority_1ab06b78cbc835080395b87c972b33102b" prot="public" virt="non-virtual"><scope>steemit::chain::shared_authority</scope><name>key_pair_allocator_type</name></member>
      <member refid="db/d70/structsteemit_1_1chain_1_1shared__authority_1a6dedaec9e1faa109a1da935197f67cf1" prot="public" virt="non-virtual"><scope>steemit::chain::shared_authority</scope><name>num_auths</name></member>
      <member refid="db/d70/structsteemit_1_1chain_1_1shared__authority_1ae235c4751591c373532d43217ddca51a" prot="public" virt="non-virtual"><scope>steemit::chain::shared_authority</scope><name>operator authority</name></member>
      <member refid="db/d70/structsteemit_1_1chain_1_1shared__authority_1a0ef915291cac28d9cdf4f8ba295aa648" prot="public" virt="non-virtual"><scope>steemit::chain::shared_authority</scope><name>operator=</name></member>
      <member refid="db/d70/structsteemit_1_1chain_1_1shared__authority_1a2e3972a5d9b688e8e9d32408f7963eea" prot="private" virt="non-virtual"><scope>steemit::chain::shared_authority</scope><name>shared_authority</name></member>
      <member refid="db/d70/structsteemit_1_1chain_1_1shared__authority_1a92c43193b41abeffd3f817890b6441e5" prot="public" virt="non-virtual"><scope>steemit::chain::shared_authority</scope><name>shared_authority</name></member>
      <member refid="db/d70/structsteemit_1_1chain_1_1shared__authority_1afc9efd7e63469f91deda5e71b857e261" prot="public" virt="non-virtual"><scope>steemit::chain::shared_authority</scope><name>shared_authority</name></member>
      <member refid="db/d70/structsteemit_1_1chain_1_1shared__authority_1a55bf67660a4a826bc3bada2497d3519f" prot="public" virt="non-virtual"><scope>steemit::chain::shared_authority</scope><name>shared_authority</name></member>
      <member refid="db/d70/structsteemit_1_1chain_1_1shared__authority_1a95d9d7bfbe8d26691cf77b33fab6b6af" prot="public" virt="non-virtual"><scope>steemit::chain::shared_authority</scope><name>shared_authority</name></member>
      <member refid="db/d70/structsteemit_1_1chain_1_1shared__authority_1ace535e99db3fc0ca29f47ee142c42caf" prot="public" virt="non-virtual"><scope>steemit::chain::shared_authority</scope><name>validate</name></member>
      <member refid="db/d70/structsteemit_1_1chain_1_1shared__authority_1a6d630e8fc9d77d1409c7ca7286527808" prot="public" virt="non-virtual"><scope>steemit::chain::shared_authority</scope><name>weight_threshold</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
