<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="da/d98/classsteemit_1_1chain_1_1database" kind="class" language="C++" prot="public">
    <compoundname>steemit::chain::database</compoundname>
    <basecompoundref prot="public" virt="non-virtual">database</basecompoundref>
    <includes refid="df/da2/database_8hpp" local="no">database.hpp</includes>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a296b58f65eb4bd90ab5d7a9cdba34a09" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="df/d1f/classsteemit_1_1chain_1_1witness__object" kindref="compound">witness_object</ref> &amp;</type>
        <definition>const witness_object&amp; steemit::chain::database::validate_block_header</definition>
        <argsstring>(uint32_t skip, const signed_block &amp;next_block) const</argsstring>
        <name>validate_block_header</name>
        <param>
          <type>uint32_t</type>
          <declname>skip</declname>
        </param>
        <param>
          <type>const signed_block &amp;</type>
          <declname>next_block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Steps involved in applying a new block </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="537" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1afdf7f3d29a321868da97a6cab8c5b589" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::create_block_summary</definition>
        <argsstring>(const signed_block &amp;next_block)</argsstring>
        <name>create_block_summary</name>
        <param>
          <type>const signed_block &amp;</type>
          <declname>next_block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="539" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a8290a53133701ef9e97fce734922c24e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::update_witness_schedule4</definition>
        <argsstring>()</argsstring>
        <name>update_witness_schedule4</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="541" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1aca532e44fcdeb5817960245ee8fb606a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::update_median_witness_props</definition>
        <argsstring>()</argsstring>
        <name>update_median_witness_props</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="543" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a2da1c132c95d2ebebbe85a73e596ddac" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::clear_null_account_balance</definition>
        <argsstring>()</argsstring>
        <name>clear_null_account_balance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="545" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a42cbc0442c977d113349ee05c0e3614a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::update_global_dynamic_data</definition>
        <argsstring>(const signed_block &amp;b)</argsstring>
        <name>update_global_dynamic_data</name>
        <param>
          <type>const signed_block &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="547" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1acbe5917294280b663ba4fdeea10da079" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::update_signing_witness</definition>
        <argsstring>(const witness_object &amp;signing_witness, const signed_block &amp;new_block)</argsstring>
        <name>update_signing_witness</name>
        <param>
          <type>const <ref refid="df/d1f/classsteemit_1_1chain_1_1witness__object" kindref="compound">witness_object</ref> &amp;</type>
          <declname>signing_witness</declname>
        </param>
        <param>
          <type>const signed_block &amp;</type>
          <declname>new_block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="549" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a2ab764a4b992053ebd4c2565c08021f3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::update_last_irreversible_block</definition>
        <argsstring>()</argsstring>
        <name>update_last_irreversible_block</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="551" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a6f9576dca05246786979bbcee7ef8d8d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::clear_expired_transactions</definition>
        <argsstring>()</argsstring>
        <name>clear_expired_transactions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="553" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a6cfb7e5f43a6739ee6b1f311291c5f90" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::clear_expired_orders</definition>
        <argsstring>()</argsstring>
        <name>clear_expired_orders</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="555" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1ab9d8178e20a6e7807b09713b360d39e1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::process_header_extensions</definition>
        <argsstring>(const signed_block &amp;next_block)</argsstring>
        <name>process_header_extensions</name>
        <param>
          <type>const signed_block &amp;</type>
          <declname>next_block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="557" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a12820999830e98e6d33512ad7fb1eeba" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::reset_virtual_schedule_time</definition>
        <argsstring>()</argsstring>
        <name>reset_virtual_schedule_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="559" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a40b8beceb2851f8571d36df6c0dd8e0e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::init_hardforks</definition>
        <argsstring>()</argsstring>
        <name>init_hardforks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="561" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1aff5b8842e71b82e08b80ff2548da9dfb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::process_hardforks</definition>
        <argsstring>()</argsstring>
        <name>process_hardforks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="563" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1abd4b4f578d33baf8ec341b8ab7471d18" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::apply_hardfork</definition>
        <argsstring>(uint32_t hardfork)</argsstring>
        <name>apply_hardfork</name>
        <param>
          <type>uint32_t</type>
          <declname>hardfork</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="565" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="da/d98/classsteemit_1_1chain_1_1database_1afd81b7d9bc2099fda77544ddc53f9dc5" prot="public" static="no">
        <name>validation_steps</name>
        <enumvalue id="da/d98/classsteemit_1_1chain_1_1database_1afd81b7d9bc2099fda77544ddc53f9dc5addc8b88d20727cbd0fc4a1b37e2cc4ed" prot="public">
          <name>skip_nothing</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d98/classsteemit_1_1chain_1_1database_1afd81b7d9bc2099fda77544ddc53f9dc5add5f3dde5faa4b2b43305b115eb0c999" prot="public">
          <name>skip_witness_signature</name>
          <initializer>= 1 &lt;&lt; 0</initializer>
          <briefdescription>
<para>used while reindexing </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d98/classsteemit_1_1chain_1_1database_1afd81b7d9bc2099fda77544ddc53f9dc5a25ee59e2966d45e3c4a6e2c2c6775302" prot="public">
          <name>skip_transaction_signatures</name>
          <initializer>=
                1 &lt;&lt; 1</initializer>
          <briefdescription>
<para>used by non-witness nodes </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d98/classsteemit_1_1chain_1_1database_1afd81b7d9bc2099fda77544ddc53f9dc5a7bb2199e0feae1adbe0727d9a19f9189" prot="public">
          <name>skip_transaction_dupe_check</name>
          <initializer>=
                1 &lt;&lt; 2</initializer>
          <briefdescription>
<para>used while reindexing </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d98/classsteemit_1_1chain_1_1database_1afd81b7d9bc2099fda77544ddc53f9dc5a3943acc8542ee90a6e1d8893c7cb8e1d" prot="public">
          <name>skip_fork_db</name>
          <initializer>= 1 &lt;&lt; 3</initializer>
          <briefdescription>
<para>used while reindexing </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d98/classsteemit_1_1chain_1_1database_1afd81b7d9bc2099fda77544ddc53f9dc5a9680a557f45656d22f1de36a08ffb201" prot="public">
          <name>skip_block_size_check</name>
          <initializer>=
                1 &lt;&lt; 4</initializer>
          <briefdescription>
<para>used when applying locally generated transactions </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d98/classsteemit_1_1chain_1_1database_1afd81b7d9bc2099fda77544ddc53f9dc5aed920890cb793e0511e74aa644999afb" prot="public">
          <name>skip_tapos_check</name>
          <initializer>= 1
                        &lt;&lt; 5</initializer>
          <briefdescription>
<para>used while reindexing <ndash/> note this skips expiration check as well </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d98/classsteemit_1_1chain_1_1database_1afd81b7d9bc2099fda77544ddc53f9dc5af43114f997f739cf7d36cdc11425370a" prot="public">
          <name>skip_authority_check</name>
          <initializer>= 1
                        &lt;&lt; 6</initializer>
          <briefdescription>
<para>used while reindexing <ndash/> disables any checking of authority on transactions </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d98/classsteemit_1_1chain_1_1database_1afd81b7d9bc2099fda77544ddc53f9dc5a464d089d26016a084aa94016cb8a0161" prot="public">
          <name>skip_merkle_check</name>
          <initializer>= 1 &lt;&lt; 7</initializer>
          <briefdescription>
<para>used while reindexing </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d98/classsteemit_1_1chain_1_1database_1afd81b7d9bc2099fda77544ddc53f9dc5aad7dc26984e6b37067e6f9673540f8b5" prot="public">
          <name>skip_undo_history_check</name>
          <initializer>= 1 &lt;&lt; 8</initializer>
          <briefdescription>
<para>used while reindexing </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d98/classsteemit_1_1chain_1_1database_1afd81b7d9bc2099fda77544ddc53f9dc5ac8c77097fb5f7c8dae2f93afe52a3946" prot="public">
          <name>skip_witness_schedule_check</name>
          <initializer>=
                1 &lt;&lt; 9</initializer>
          <briefdescription>
<para>used while reindexing </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d98/classsteemit_1_1chain_1_1database_1afd81b7d9bc2099fda77544ddc53f9dc5a05af17d74e216172fab4d6b8f4ee950b" prot="public">
          <name>skip_validate</name>
          <initializer>= 1
                        &lt;&lt; 10</initializer>
          <briefdescription>
<para>used prior to checkpoint, skips validate() call on transaction </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d98/classsteemit_1_1chain_1_1database_1afd81b7d9bc2099fda77544ddc53f9dc5ae5f4e5e8033c60c3cb84dd1fd5e4ae89" prot="public">
          <name>skip_validate_invariants</name>
          <initializer>= 1
                        &lt;&lt; 11</initializer>
          <briefdescription>
<para>used to skip database invariant check on block application </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d98/classsteemit_1_1chain_1_1database_1afd81b7d9bc2099fda77544ddc53f9dc5aff4a39e99af7ceb85a500b7de0638c4b" prot="public">
          <name>skip_undo_block</name>
          <initializer>= 1 &lt;&lt; 12</initializer>
          <briefdescription>
<para>used to skip undo db on reindex </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d98/classsteemit_1_1chain_1_1database_1afd81b7d9bc2099fda77544ddc53f9dc5a84ecb7dbb0c219502560178e52be8b0d" prot="public">
          <name>skip_block_log</name>
          <initializer>=
                1 &lt;&lt; 13</initializer>
          <briefdescription>
<para>used to skip block logging on reindex </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="59" column="1" bodyfile="libraries/chain/include/steemit/chain/database.hpp" bodystart="59" bodyend="84"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="da/d98/classsteemit_1_1chain_1_1database_1a352db2d9e201c3d2d1b90fefafe2d385" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool steemit::chain::database::_is_producing</definition>
        <argsstring></argsstring>
        <name>_is_producing</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="55" column="1" bodyfile="libraries/chain/include/steemit/chain/database.hpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/d98/classsteemit_1_1chain_1_1database_1a0babbc36ecf340579e9e943cadc52b70" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool steemit::chain::database::_log_hardforks</definition>
        <argsstring></argsstring>
        <name>_log_hardforks</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="57" column="1" bodyfile="libraries/chain/include/steemit/chain/database.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/d98/classsteemit_1_1chain_1_1database_1a85a3dc43ff531e8e334ef074e9dc5089" prot="public" static="no" mutable="no">
        <type>fc::signal&lt; void(const <ref refid="dc/dc3/structsteemit_1_1chain_1_1operation__notification" kindref="compound">operation_notification</ref> &amp;)&gt;</type>
        <definition>fc::signal&lt;void(const operation_notification &amp;)&gt; steemit::chain::database::pre_apply_operation</definition>
        <argsstring></argsstring>
        <name>pre_apply_operation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted for plugins to process every operation after it has been fully applied. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="260" column="1" bodyfile="libraries/chain/include/steemit/chain/database.hpp" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/d98/classsteemit_1_1chain_1_1database_1a039b8a0a2b75db3129ce432d441eeb31" prot="public" static="no" mutable="no">
        <type>fc::signal&lt; void(const <ref refid="dc/dc3/structsteemit_1_1chain_1_1operation__notification" kindref="compound">operation_notification</ref> &amp;)&gt;</type>
        <definition>fc::signal&lt;void(const operation_notification &amp;)&gt; steemit::chain::database::post_apply_operation</definition>
        <argsstring></argsstring>
        <name>post_apply_operation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="261" column="1" bodyfile="libraries/chain/include/steemit/chain/database.hpp" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/d98/classsteemit_1_1chain_1_1database_1a059e744028a5a374a6d4b69d5b8cdecf" prot="public" static="no" mutable="no">
        <type>fc::signal&lt; void(const signed_block &amp;)&gt;</type>
        <definition>fc::signal&lt;void(const signed_block &amp;)&gt; steemit::chain::database::applied_block</definition>
        <argsstring></argsstring>
        <name>applied_block</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted after all operations and virtual operation for a block have been applied but before the get_applied_operations() are cleared.</para><para>You may not yield from this callback because the blockchain is holding the write lock and may be in an &quot;inconstant state&quot; until after it is released. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="271" column="1" bodyfile="libraries/chain/include/steemit/chain/database.hpp" bodystart="271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/d98/classsteemit_1_1chain_1_1database_1a94e065706bd38d368b7de8146e8a4631" prot="public" static="no" mutable="no">
        <type>fc::signal&lt; void(const signed_transaction &amp;)&gt;</type>
        <definition>fc::signal&lt;void(const signed_transaction &amp;)&gt; steemit::chain::database::on_pending_transaction</definition>
        <argsstring></argsstring>
        <name>on_pending_transaction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted any time a new transaction is added to the pending block state. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="277" column="1" bodyfile="libraries/chain/include/steemit/chain/database.hpp" bodystart="277" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/d98/classsteemit_1_1chain_1_1database_1aa4fd5ff1155becf2ebffcfdf3a913ada" prot="public" static="no" mutable="no">
        <type>fc::signal&lt; void(const signed_transaction &amp;)&gt;</type>
        <definition>fc::signal&lt;void(const signed_transaction &amp;)&gt; steemit::chain::database::on_applied_transaction</definition>
        <argsstring></argsstring>
        <name>on_applied_transaction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted any time a new transaction has been applied to the chain state. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="283" column="1" bodyfile="libraries/chain/include/steemit/chain/database.hpp" bodystart="283" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/d98/classsteemit_1_1chain_1_1database_1a9bfdf5a578a2c3afb5fbf22ca07594d4" prot="public" static="no" mutable="no">
        <type>std::deque&lt; signed_transaction &gt;</type>
        <definition>std::deque&lt;signed_transaction&gt; steemit::chain::database::_popped_tx</definition>
        <argsstring></argsstring>
        <name>_popped_tx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>when popping a block, the transactions that were removed get cached here so they can be reapplied at the proper time </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="470" column="1" bodyfile="libraries/chain/include/steemit/chain/database.hpp" bodystart="470" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="da/d98/classsteemit_1_1chain_1_1database_1af11106ef56f9476d9fc8c7829bf8778e" prot="private" static="no" mutable="no">
        <type>optional&lt; chainbase::database::session &gt;</type>
        <definition>optional&lt;chainbase::database::session&gt; steemit::chain::database::_pending_tx_session</definition>
        <argsstring></argsstring>
        <name>_pending_tx_session</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="521" column="1" bodyfile="libraries/chain/include/steemit/chain/database.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/d98/classsteemit_1_1chain_1_1database_1a2d5a92192833545800ca7394dcf25d48" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; database_impl &gt;</type>
        <definition>std::unique_ptr&lt;database_impl&gt; steemit::chain::database::_my</definition>
        <argsstring></argsstring>
        <name>_my</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="569" column="1" bodyfile="libraries/chain/include/steemit/chain/database.hpp" bodystart="569" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/d98/classsteemit_1_1chain_1_1database_1aac03b372f5b399eb1d61480738f5bc0c" prot="private" static="no" mutable="no">
        <type>vector&lt; signed_transaction &gt;</type>
        <definition>vector&lt;signed_transaction&gt; steemit::chain::database::_pending_tx</definition>
        <argsstring></argsstring>
        <name>_pending_tx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="571" column="1" bodyfile="libraries/chain/include/steemit/chain/database.hpp" bodystart="571" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/d98/classsteemit_1_1chain_1_1database_1ab57d3b8a316d46001b29ce01113e2592" prot="private" static="no" mutable="no">
        <type><ref refid="d8/d4d/classsteemit_1_1chain_1_1fork__database" kindref="compound">fork_database</ref></type>
        <definition>fork_database steemit::chain::database::_fork_db</definition>
        <argsstring></argsstring>
        <name>_fork_db</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="572" column="1" bodyfile="libraries/chain/include/steemit/chain/database.hpp" bodystart="572" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/d98/classsteemit_1_1chain_1_1database_1a81e7a7dee6ce3c9a1da77f2f57f95b48" prot="private" static="no" mutable="no">
        <type>fc::time_point_sec</type>
        <definition>fc::time_point_sec steemit::chain::database::_hardfork_times[STEEMIT_NUM_HARDFORKS+1]</definition>
        <argsstring>[STEEMIT_NUM_HARDFORKS+1]</argsstring>
        <name>_hardfork_times</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="573" column="1" bodyfile="libraries/chain/include/steemit/chain/database.hpp" bodystart="573" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/d98/classsteemit_1_1chain_1_1database_1a0d53ec4bbf95bb4a64f4fd376739e608" prot="private" static="no" mutable="no">
        <type>protocol::hardfork_version</type>
        <definition>protocol::hardfork_version steemit::chain::database::_hardfork_versions[ STEEMIT_NUM_HARDFORKS+1]</definition>
        <argsstring>[STEEMIT_NUM_HARDFORKS+1]</argsstring>
        <name>_hardfork_versions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="574" column="1" bodyfile="libraries/chain/include/steemit/chain/database.hpp" bodystart="575" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/d98/classsteemit_1_1chain_1_1database_1a549a727b415db4fac063a251f56c7f4a" prot="private" static="no" mutable="no">
        <type><ref refid="d3/d05/classsteemit_1_1chain_1_1block__log" kindref="compound">block_log</ref></type>
        <definition>block_log steemit::chain::database::_block_log</definition>
        <argsstring></argsstring>
        <name>_block_log</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="577" column="1" bodyfile="libraries/chain/include/steemit/chain/database.hpp" bodystart="577" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/d98/classsteemit_1_1chain_1_1database_1a3e5937cb67e18c4f5e0c92018927edfb" prot="private" static="no" mutable="no">
        <type>fc::signal&lt; void()&gt;</type>
        <definition>fc::signal&lt;void()&gt; steemit::chain::database::_plugin_index_signal</definition>
        <argsstring></argsstring>
        <name>_plugin_index_signal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="583" column="1" bodyfile="libraries/chain/include/steemit/chain/database.hpp" bodystart="583" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/d98/classsteemit_1_1chain_1_1database_1adf68a775b975c6bd98eba28249ff5eec" prot="private" static="no" mutable="no">
        <type>transaction_id_type</type>
        <definition>transaction_id_type steemit::chain::database::_current_trx_id</definition>
        <argsstring></argsstring>
        <name>_current_trx_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="585" column="1" bodyfile="libraries/chain/include/steemit/chain/database.hpp" bodystart="585" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/d98/classsteemit_1_1chain_1_1database_1aca69e9eb31b5fe27357d30d9a1ccb5ec" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t steemit::chain::database::_current_block_num</definition>
        <argsstring></argsstring>
        <name>_current_block_num</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="586" column="1" bodyfile="libraries/chain/include/steemit/chain/database.hpp" bodystart="586" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/d98/classsteemit_1_1chain_1_1database_1a6baa89fbb408f79bda59883aee6a993e" prot="private" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t steemit::chain::database::_current_trx_in_block</definition>
        <argsstring></argsstring>
        <name>_current_trx_in_block</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="587" column="1" bodyfile="libraries/chain/include/steemit/chain/database.hpp" bodystart="587" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/d98/classsteemit_1_1chain_1_1database_1ab942979aa9c41d3c53dba54e567e7fcd" prot="private" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t steemit::chain::database::_current_op_in_trx</definition>
        <argsstring></argsstring>
        <name>_current_op_in_trx</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="588" column="1" bodyfile="libraries/chain/include/steemit/chain/database.hpp" bodystart="588" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/d98/classsteemit_1_1chain_1_1database_1aa9d3d7cf5e655922211e2151f2912c50" prot="private" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t steemit::chain::database::_current_virtual_op</definition>
        <argsstring></argsstring>
        <name>_current_virtual_op</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="589" column="1" bodyfile="libraries/chain/include/steemit/chain/database.hpp" bodystart="589" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/d98/classsteemit_1_1chain_1_1database_1a265fbb90d82e3a88d0004af4095be928" prot="private" static="no" mutable="no">
        <type>flat_map&lt; uint32_t, block_id_type &gt;</type>
        <definition>flat_map&lt;uint32_t, block_id_type&gt; steemit::chain::database::_checkpoints</definition>
        <argsstring></argsstring>
        <name>_checkpoints</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="591" column="1" bodyfile="libraries/chain/include/steemit/chain/database.hpp" bodystart="591" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/d98/classsteemit_1_1chain_1_1database_1acd8b00b3b4bcaa946b6548ea75ce2b0b" prot="private" static="no" mutable="no">
        <type><ref refid="d8/dc6/classsteemit_1_1chain_1_1node__property__object" kindref="compound">node_property_object</ref></type>
        <definition>node_property_object steemit::chain::database::_node_property_object</definition>
        <argsstring></argsstring>
        <name>_node_property_object</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="593" column="1" bodyfile="libraries/chain/include/steemit/chain/database.hpp" bodystart="593" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/d98/classsteemit_1_1chain_1_1database_1af74bb5a40d1c586650d8a9304167796d" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t steemit::chain::database::_flush_blocks</definition>
        <argsstring></argsstring>
        <name>_flush_blocks</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="595" column="1" bodyfile="libraries/chain/include/steemit/chain/database.hpp" bodystart="595" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/d98/classsteemit_1_1chain_1_1database_1a40abc1bb91839c1e0fd83eb239e1eed6" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t steemit::chain::database::_next_flush_block</definition>
        <argsstring></argsstring>
        <name>_next_flush_block</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="596" column="1" bodyfile="libraries/chain/include/steemit/chain/database.hpp" bodystart="596" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/d98/classsteemit_1_1chain_1_1database_1ae8237d2a73c5d7934bf8d45a2265f022" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t steemit::chain::database::_last_free_gb_printed</definition>
        <argsstring></argsstring>
        <name>_last_free_gb_printed</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="598" column="1" bodyfile="libraries/chain/include/steemit/chain/database.hpp" bodystart="598" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/d98/classsteemit_1_1chain_1_1database_1a08aaf7bfc767e7fc3b9c48b6447df1a5" prot="private" static="no" mutable="no">
        <type>flat_map&lt; std::string, std::shared_ptr&lt; <ref refid="da/d3f/classsteemit_1_1chain_1_1custom__operation__interpreter" kindref="compound">custom_operation_interpreter</ref> &gt; &gt;</type>
        <definition>flat_map&lt;std::string, std::shared_ptr&lt;custom_operation_interpreter&gt; &gt; steemit::chain::database::_custom_operation_interpreters</definition>
        <argsstring></argsstring>
        <name>_custom_operation_interpreters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="600" column="1" bodyfile="libraries/chain/include/steemit/chain/database.hpp" bodystart="600" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/d98/classsteemit_1_1chain_1_1database_1a6634b25f2c04e4aefaa38b3dfa8cfef3" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string steemit::chain::database::_json_schema</definition>
        <argsstring></argsstring>
        <name>_json_schema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="601" column="1" bodyfile="libraries/chain/include/steemit/chain/database.hpp" bodystart="601" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1aad264eed00502d18178d16aa00e8bedf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>steemit::chain::database::database</definition>
        <argsstring>()</argsstring>
        <name>database</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="43" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1ac9178c25f2f9b9ae7ade5e34da25befd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>steemit::chain::database::~database</definition>
        <argsstring>()</argsstring>
        <name>~database</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a2ab154304dd7d4df555c5f254d5a127b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool steemit::chain::database::is_producing</definition>
        <argsstring>() const</argsstring>
        <name>is_producing</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="47" column="1" bodyfile="libraries/chain/include/steemit/chain/database.hpp" bodystart="47" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a2ef002c6d8b293fbfdede6a385fd32fc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::set_producing</definition>
        <argsstring>(bool p)</argsstring>
        <name>set_producing</name>
        <param>
          <type>bool</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="51" column="1" bodyfile="libraries/chain/include/steemit/chain/database.hpp" bodystart="51" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a3fdaaea8d9ceb603f1ec705f73396c52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::open</definition>
        <argsstring>(const fc::path &amp;data_dir, const fc::path &amp;shared_mem_dir, uint64_t initial_supply=STEEMIT_INIT_SUPPLY, uint64_t shared_file_size=0, uint32_t chainbase_flags=0)</argsstring>
        <name>open</name>
        <param>
          <type>const fc::path &amp;</type>
          <declname>data_dir</declname>
        </param>
        <param>
          <type>const fc::path &amp;</type>
          <declname>shared_mem_dir</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>initial_supply</declname>
          <defval>STEEMIT_INIT_SUPPLY</defval>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>shared_file_size</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>chainbase_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Open a database, creating a new one if necessary. </para>        </briefdescription>
        <detaileddescription>
<para>Opens a database in the specified directory. If no initialized database is found the database will be initialized with the default state.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to open or create database in </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1aac49873d8a2f8076af3e5c0df9804296" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::reindex</definition>
        <argsstring>(const fc::path &amp;data_dir, const fc::path &amp;shared_mem_dir, uint64_t shared_file_size=(1024l *1024l *1024l *8l))</argsstring>
        <name>reindex</name>
        <param>
          <type>const fc::path &amp;</type>
          <declname>data_dir</declname>
        </param>
        <param>
          <type>const fc::path &amp;</type>
          <declname>shared_mem_dir</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>shared_file_size</declname>
          <defval>(1024l *1024l *1024l *8l)</defval>
        </param>
        <briefdescription>
<para>Rebuild object graph from block history and open detabase. </para>        </briefdescription>
        <detaileddescription>
<para>This method may be called after or instead of <ref refid="da/d98/classsteemit_1_1chain_1_1database_1a3fdaaea8d9ceb603f1ec705f73396c52" kindref="member">database::open</ref>, and will rebuild the object graph by replaying blockchain history. When this method exits successfully, the database will be open. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a309123bdc667d25d101e3e11c2054519" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::wipe</definition>
        <argsstring>(const fc::path &amp;data_dir, const fc::path &amp;shared_mem_dir, bool include_blocks)</argsstring>
        <name>wipe</name>
        <param>
          <type>const fc::path &amp;</type>
          <declname>data_dir</declname>
        </param>
        <param>
          <type>const fc::path &amp;</type>
          <declname>shared_mem_dir</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>include_blocks</declname>
        </param>
        <briefdescription>
<para>wipe Delete database from disk, and potentially the raw chain as well. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>include_blocks</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, delete the raw chain as well as the database.</para></parameterdescription>
</parameteritem>
</parameterlist>
Will close the database before wiping. Database will be closed when this function returns. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1aa6d1f62572f5eab906cd020a54eee30c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::close</definition>
        <argsstring>(bool rewind=true)</argsstring>
        <name>close</name>
        <param>
          <type>bool</type>
          <declname>rewind</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1ae2909bd1dd2a60cefb0b2e0573a6af70" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool steemit::chain::database::is_known_block</definition>
        <argsstring>(const block_id_type &amp;id) const</argsstring>
        <name>is_known_block</name>
        <param>
          <type>const block_id_type &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the block is in our fork DB or saved to disk as part of the official chain, otherwise return false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1aa87f33e618e662f391e179a76953fd42" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool steemit::chain::database::is_known_transaction</definition>
        <argsstring>(const transaction_id_type &amp;id) const</argsstring>
        <name>is_known_transaction</name>
        <param>
          <type>const transaction_id_type &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1aba9c6754db413b6a8c2244ac6e209c08" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>fc::sha256</type>
        <definition>fc::sha256 steemit::chain::database::get_pow_target</definition>
        <argsstring>() const</argsstring>
        <name>get_pow_target</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="125" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a0500612484403bad5b281808349e4e8a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t steemit::chain::database::get_pow_summary_target</definition>
        <argsstring>() const</argsstring>
        <name>get_pow_summary_target</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1ad110ef5e563739a07ee5ee0b8f982894" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>block_id_type</type>
        <definition>block_id_type steemit::chain::database::get_block_id_for_num</definition>
        <argsstring>(uint32_t block_num) const</argsstring>
        <name>get_block_id_for_num</name>
        <param>
          <type>uint32_t</type>
          <declname>block_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1af250ba8ee6f488acf60f7d9ed38dc8ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>optional&lt; signed_block &gt;</type>
        <definition>optional&lt;signed_block&gt; steemit::chain::database::fetch_block_by_id</definition>
        <argsstring>(const block_id_type &amp;id) const</argsstring>
        <name>fetch_block_by_id</name>
        <param>
          <type>const block_id_type &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a130ab82259bf9a1b5bc20b640c68b594" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>optional&lt; signed_block &gt;</type>
        <definition>optional&lt;signed_block&gt; steemit::chain::database::fetch_block_by_number</definition>
        <argsstring>(uint32_t num) const</argsstring>
        <name>fetch_block_by_number</name>
        <param>
          <type>uint32_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a92190284f74a16fc292f317a409fe2e0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const signed_transaction</type>
        <definition>const signed_transaction steemit::chain::database::get_recent_transaction</definition>
        <argsstring>(const transaction_id_type &amp;trx_id) const</argsstring>
        <name>get_recent_transaction</name>
        <param>
          <type>const transaction_id_type &amp;</type>
          <declname>trx_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="135" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a4272606e7374a87cb9100d61f4cb4a84" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; block_id_type &gt;</type>
        <definition>std::vector&lt;block_id_type&gt; steemit::chain::database::get_block_ids_on_fork</definition>
        <argsstring>(block_id_type head_of_fork) const</argsstring>
        <name>get_block_ids_on_fork</name>
        <param>
          <type>block_id_type</type>
          <declname>head_of_fork</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a6bb8a172de5c07f3809cb87e8fb264b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>chain_id_type</type>
        <definition>chain_id_type steemit::chain::database::get_chain_id</definition>
        <argsstring>() const</argsstring>
        <name>get_chain_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1aae3c1fdb3ecac7a751a0734fdada43f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="df/d1f/classsteemit_1_1chain_1_1witness__object" kindref="compound">witness_object</ref> &amp;</type>
        <definition>const witness_object&amp; steemit::chain::database::get_witness</definition>
        <argsstring>(const account_name_type &amp;name) const</argsstring>
        <name>get_witness</name>
        <param>
          <type>const account_name_type &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a3fa77bb08c5bc9069769528bad2c153b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="df/d1f/classsteemit_1_1chain_1_1witness__object" kindref="compound">witness_object</ref> *</type>
        <definition>const witness_object* steemit::chain::database::find_witness</definition>
        <argsstring>(const account_name_type &amp;name) const</argsstring>
        <name>find_witness</name>
        <param>
          <type>const account_name_type &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="144" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a11edabc5860513450731278180f40c2f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="d1/d66/classsteemit_1_1chain_1_1account__object" kindref="compound">account_object</ref> &amp;</type>
        <definition>const account_object&amp; steemit::chain::database::get_account</definition>
        <argsstring>(const account_name_type &amp;name) const</argsstring>
        <name>get_account</name>
        <param>
          <type>const account_name_type &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="146" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1adad55045d5e67a4e08d79d48a506f57d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="d1/d66/classsteemit_1_1chain_1_1account__object" kindref="compound">account_object</ref> *</type>
        <definition>const account_object* steemit::chain::database::find_account</definition>
        <argsstring>(const account_name_type &amp;name) const</argsstring>
        <name>find_account</name>
        <param>
          <type>const account_name_type &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="148" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a6af12889cdecf38c02c1bbdc57f33de0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="db/d00/classsteemit_1_1chain_1_1comment__object" kindref="compound">comment_object</ref> &amp;</type>
        <definition>const comment_object&amp; steemit::chain::database::get_comment</definition>
        <argsstring>(const account_name_type &amp;author, const shared_string &amp;permlink) const</argsstring>
        <name>get_comment</name>
        <param>
          <type>const account_name_type &amp;</type>
          <declname>author</declname>
        </param>
        <param>
          <type>const <ref refid="d8/d9b/namespacesteemit_1_1chain_1a8e2d955447720336a4deaae60ad49519" kindref="member">shared_string</ref> &amp;</type>
          <declname>permlink</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="150" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1ac131e026d3fbb685782274045ae897b9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="db/d00/classsteemit_1_1chain_1_1comment__object" kindref="compound">comment_object</ref> *</type>
        <definition>const comment_object* steemit::chain::database::find_comment</definition>
        <argsstring>(const account_name_type &amp;author, const shared_string &amp;permlink) const</argsstring>
        <name>find_comment</name>
        <param>
          <type>const account_name_type &amp;</type>
          <declname>author</declname>
        </param>
        <param>
          <type>const <ref refid="d8/d9b/namespacesteemit_1_1chain_1a8e2d955447720336a4deaae60ad49519" kindref="member">shared_string</ref> &amp;</type>
          <declname>permlink</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="152" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a4ad26ad7abd4b147844ec9300cc6bf25" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="db/d00/classsteemit_1_1chain_1_1comment__object" kindref="compound">comment_object</ref> &amp;</type>
        <definition>const comment_object&amp; steemit::chain::database::get_comment</definition>
        <argsstring>(const account_name_type &amp;author, const string &amp;permlink) const</argsstring>
        <name>get_comment</name>
        <param>
          <type>const account_name_type &amp;</type>
          <declname>author</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>permlink</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1aa67684290eaa4f294214cd305c926196" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="db/d00/classsteemit_1_1chain_1_1comment__object" kindref="compound">comment_object</ref> *</type>
        <definition>const comment_object* steemit::chain::database::find_comment</definition>
        <argsstring>(const account_name_type &amp;author, const string &amp;permlink) const</argsstring>
        <name>find_comment</name>
        <param>
          <type>const account_name_type &amp;</type>
          <declname>author</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>permlink</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1ab39d0300400f2b282ee7c1b32f7a883f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="d8/d14/classsteemit_1_1chain_1_1category__object" kindref="compound">category_object</ref> &amp;</type>
        <definition>const category_object&amp; steemit::chain::database::get_category</definition>
        <argsstring>(const shared_string &amp;name) const</argsstring>
        <name>get_category</name>
        <param>
          <type>const <ref refid="d8/d9b/namespacesteemit_1_1chain_1a8e2d955447720336a4deaae60ad49519" kindref="member">shared_string</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1ab9549ce929700c3bcc2e91ab7213a35a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="d8/d14/classsteemit_1_1chain_1_1category__object" kindref="compound">category_object</ref> *</type>
        <definition>const category_object* steemit::chain::database::find_category</definition>
        <argsstring>(const shared_string &amp;name) const</argsstring>
        <name>find_category</name>
        <param>
          <type>const <ref refid="d8/d9b/namespacesteemit_1_1chain_1a8e2d955447720336a4deaae60ad49519" kindref="member">shared_string</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a20ac3589979dc9678e7f728e07df27e0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="df/dd0/classsteemit_1_1chain_1_1escrow__object" kindref="compound">escrow_object</ref> &amp;</type>
        <definition>const escrow_object&amp; steemit::chain::database::get_escrow</definition>
        <argsstring>(const account_name_type &amp;name, uint32_t escrow_id) const</argsstring>
        <name>get_escrow</name>
        <param>
          <type>const account_name_type &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>escrow_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a3b3a6803fef8a8725f05197f9d1fb5af" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="df/dd0/classsteemit_1_1chain_1_1escrow__object" kindref="compound">escrow_object</ref> *</type>
        <definition>const escrow_object* steemit::chain::database::find_escrow</definition>
        <argsstring>(const account_name_type &amp;name, uint32_t escrow_id) const</argsstring>
        <name>find_escrow</name>
        <param>
          <type>const account_name_type &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>escrow_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="164" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a2eb54dc319cd4c5851f1f57f17eba261" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="d8/d53/classsteemit_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref> &amp;</type>
        <definition>const limit_order_object&amp; steemit::chain::database::get_limit_order</definition>
        <argsstring>(const account_name_type &amp;owner, uint32_t id) const</argsstring>
        <name>get_limit_order</name>
        <param>
          <type>const account_name_type &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a0b59f98fa2aad0e192a1fe579fffd07c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="d8/d53/classsteemit_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref> *</type>
        <definition>const limit_order_object* steemit::chain::database::find_limit_order</definition>
        <argsstring>(const account_name_type &amp;owner, uint32_t id) const</argsstring>
        <name>find_limit_order</name>
        <param>
          <type>const account_name_type &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="168" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a05a7e1ca680498f8b6530d8e52dce792" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="d9/d04/classsteemit_1_1chain_1_1savings__withdraw__object" kindref="compound">savings_withdraw_object</ref> &amp;</type>
        <definition>const savings_withdraw_object&amp; steemit::chain::database::get_savings_withdraw</definition>
        <argsstring>(const account_name_type &amp;owner, uint32_t request_id) const</argsstring>
        <name>get_savings_withdraw</name>
        <param>
          <type>const account_name_type &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>request_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="170" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1ad061b548bc3de5e2c3f55f27c91ebe79" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="d9/d04/classsteemit_1_1chain_1_1savings__withdraw__object" kindref="compound">savings_withdraw_object</ref> *</type>
        <definition>const savings_withdraw_object* steemit::chain::database::find_savings_withdraw</definition>
        <argsstring>(const account_name_type &amp;owner, uint32_t request_id) const</argsstring>
        <name>find_savings_withdraw</name>
        <param>
          <type>const account_name_type &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>request_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="172" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a987074df7a66d6e2b842552d520be094" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="d0/d48/classsteemit_1_1chain_1_1dynamic__global__property__object" kindref="compound">dynamic_global_property_object</ref> &amp;</type>
        <definition>const dynamic_global_property_object&amp; steemit::chain::database::get_dynamic_global_properties</definition>
        <argsstring>() const</argsstring>
        <name>get_dynamic_global_properties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1ade9b66c970da847d37c7c13110a1458a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="d8/dc6/classsteemit_1_1chain_1_1node__property__object" kindref="compound">node_property_object</ref> &amp;</type>
        <definition>const node_property_object&amp; steemit::chain::database::get_node_properties</definition>
        <argsstring>() const</argsstring>
        <name>get_node_properties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="176" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a1af2fe51e4ce4654e8ea1bba203890ff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="d9/d87/classsteemit_1_1chain_1_1feed__history__object" kindref="compound">feed_history_object</ref> &amp;</type>
        <definition>const feed_history_object&amp; steemit::chain::database::get_feed_history</definition>
        <argsstring>() const</argsstring>
        <name>get_feed_history</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="178" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a147236c1a749121a61750d01a85bb309" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="d5/d57/classsteemit_1_1chain_1_1witness__schedule__object" kindref="compound">witness_schedule_object</ref> &amp;</type>
        <definition>const witness_schedule_object&amp; steemit::chain::database::get_witness_schedule_object</definition>
        <argsstring>() const</argsstring>
        <name>get_witness_schedule_object</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1abc6216b3554c3f9b8a19851eb4caa32b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const hardfork_property_object &amp;</type>
        <definition>const hardfork_property_object&amp; steemit::chain::database::get_hardfork_property_object</definition>
        <argsstring>() const</argsstring>
        <name>get_hardfork_property_object</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="182" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a3910871659178a4995b0a32dc0366563" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const time_point_sec</type>
        <definition>const time_point_sec steemit::chain::database::calculate_discussion_payout_time</definition>
        <argsstring>(const comment_object &amp;comment) const</argsstring>
        <name>calculate_discussion_payout_time</name>
        <param>
          <type>const <ref refid="db/d00/classsteemit_1_1chain_1_1comment__object" kindref="compound">comment_object</ref> &amp;</type>
          <declname>comment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1aa1356102392d15b9af14a1caedb672eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::pay_fee</definition>
        <argsstring>(const account_object &amp;a, asset fee)</argsstring>
        <name>pay_fee</name>
        <param>
          <type>const <ref refid="d1/d66/classsteemit_1_1chain_1_1account__object" kindref="compound">account_object</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>asset</type>
          <declname>fee</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deducts fee from the account and the share supply </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="190" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a818e534a70f1ea5ead316c9f2afa0e66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::old_update_account_bandwidth</definition>
        <argsstring>(const account_object &amp;a, uint32_t trx_size, const bandwidth_type type)</argsstring>
        <name>old_update_account_bandwidth</name>
        <param>
          <type>const <ref refid="d1/d66/classsteemit_1_1chain_1_1account__object" kindref="compound">account_object</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>trx_size</declname>
        </param>
        <param>
          <type>const <ref refid="d8/d9b/namespacesteemit_1_1chain_1aeba90a44c75a64f6f4a003ccabfea35c" kindref="member">bandwidth_type</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a98654bbd6a665e52f0ea72a85da3e025" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool steemit::chain::database::update_account_bandwidth</definition>
        <argsstring>(const account_object &amp;a, uint32_t trx_size, const bandwidth_type type)</argsstring>
        <name>update_account_bandwidth</name>
        <param>
          <type>const <ref refid="d1/d66/classsteemit_1_1chain_1_1account__object" kindref="compound">account_object</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>trx_size</declname>
        </param>
        <param>
          <type>const <ref refid="d8/d9b/namespacesteemit_1_1chain_1aeba90a44c75a64f6f4a003ccabfea35c" kindref="member">bandwidth_type</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update an account&apos;s bandwidth and returns if the account had the requisite bandwidth for the trx </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="197" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1abcf06d6a3a80bc8a07e569d20654a2f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::max_bandwidth_per_share</definition>
        <argsstring>() const</argsstring>
        <name>max_bandwidth_per_share</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="199" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1aaa9f9037e428e4ac881879aeeb139fe9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t steemit::chain::database::witness_participation_rate</definition>
        <argsstring>() const</argsstring>
        <name>witness_participation_rate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the percent of block production slots that were missed in the past 128 blocks, not including the current block. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="205" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a31c8eb2617ed3132ccccbcf540bc1905" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::add_checkpoints</definition>
        <argsstring>(const flat_map&lt; uint32_t, block_id_type &gt; &amp;checkpts)</argsstring>
        <name>add_checkpoints</name>
        <param>
          <type>const flat_map&lt; uint32_t, block_id_type &gt; &amp;</type>
          <declname>checkpts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="207" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a0b3754c6c22ca07b91f17eb0b01b6afd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const flat_map&lt; uint32_t, block_id_type &gt;</type>
        <definition>const flat_map&lt;uint32_t, block_id_type&gt; steemit::chain::database::get_checkpoints</definition>
        <argsstring>() const</argsstring>
        <name>get_checkpoints</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="209" column="1" bodyfile="libraries/chain/include/steemit/chain/database.hpp" bodystart="209" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1ae3d12a7b74699cb8965bdc2c445548eb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool steemit::chain::database::before_last_checkpoint</definition>
        <argsstring>() const</argsstring>
        <name>before_last_checkpoint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="213" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a4e4c5992d4118e747d31b8adfa4ccfb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool steemit::chain::database::push_block</definition>
        <argsstring>(const signed_block &amp;b, uint32_t skip=skip_nothing)</argsstring>
        <name>push_block</name>
        <param>
          <type>const signed_block &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>skip</declname>
          <defval><ref refid="da/d98/classsteemit_1_1chain_1_1database_1afd81b7d9bc2099fda77544ddc53f9dc5addc8b88d20727cbd0fc4a1b37e2cc4ed" kindref="member">skip_nothing</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="215" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a7812e370b029b1babfe9490462c710aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::push_transaction</definition>
        <argsstring>(const signed_transaction &amp;trx, uint32_t skip=skip_nothing)</argsstring>
        <name>push_transaction</name>
        <param>
          <type>const signed_transaction &amp;</type>
          <declname>trx</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>skip</declname>
          <defval><ref refid="da/d98/classsteemit_1_1chain_1_1database_1afd81b7d9bc2099fda77544ddc53f9dc5addc8b88d20727cbd0fc4a1b37e2cc4ed" kindref="member">skip_nothing</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="217" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1aa080ef6f72b1551c39a4308f857ef1d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool steemit::chain::database::_push_block</definition>
        <argsstring>(const signed_block &amp;b)</argsstring>
        <name>_push_block</name>
        <param>
          <type>const signed_block &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="219" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a00d28386c22fda2f25e6a96b2520353c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::_push_transaction</definition>
        <argsstring>(const signed_transaction &amp;trx)</argsstring>
        <name>_push_transaction</name>
        <param>
          <type>const signed_transaction &amp;</type>
          <declname>trx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="221" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a2aecfb0cf4e12bb8e3ea12fb4956a687" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_block</type>
        <definition>signed_block steemit::chain::database::generate_block</definition>
        <argsstring>(const fc::time_point_sec when, const account_name_type &amp;witness_owner, const fc::ecc::private_key &amp;block_signing_private_key, uint32_t skip)</argsstring>
        <name>generate_block</name>
        <param>
          <type>const fc::time_point_sec</type>
          <declname>when</declname>
        </param>
        <param>
          <type>const account_name_type &amp;</type>
          <declname>witness_owner</declname>
        </param>
        <param>
          <type>const fc::ecc::private_key &amp;</type>
          <declname>block_signing_private_key</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>skip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="223" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a7542e46ab8ada662488e6e9e8ffcc93d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_block</type>
        <definition>signed_block steemit::chain::database::_generate_block</definition>
        <argsstring>(const fc::time_point_sec when, const account_name_type &amp;witness_owner, const fc::ecc::private_key &amp;block_signing_private_key)</argsstring>
        <name>_generate_block</name>
        <param>
          <type>const fc::time_point_sec</type>
          <declname>when</declname>
        </param>
        <param>
          <type>const account_name_type &amp;</type>
          <declname>witness_owner</declname>
        </param>
        <param>
          <type>const fc::ecc::private_key &amp;</type>
          <declname>block_signing_private_key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="230" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a777ad723ebbe127746551aa6078ff5f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::pop_block</definition>
        <argsstring>()</argsstring>
        <name>pop_block</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="236" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1aca14282053bde3fe4684eb86f71b9bd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::clear_pending</definition>
        <argsstring>()</argsstring>
        <name>clear_pending</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="238" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a373a523fd0217e9a323b07208b7b3518" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::notify_pre_apply_operation</definition>
        <argsstring>(operation_notification &amp;note)</argsstring>
        <name>notify_pre_apply_operation</name>
        <param>
          <type><ref refid="dc/dc3/structsteemit_1_1chain_1_1operation__notification" kindref="compound">operation_notification</ref> &amp;</type>
          <declname>note</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method is used to track applied operations during the evaluation of a block, these operations should include any operation actually included in a transaction as well as any implied/virtual operations that resulted, such as filling an order. The applied operations are cleared after post_apply_operation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="246" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1ad1c64bcf5fbe3b6c3f80118c50a6acc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::notify_post_apply_operation</definition>
        <argsstring>(const operation_notification &amp;note)</argsstring>
        <name>notify_post_apply_operation</name>
        <param>
          <type>const <ref refid="dc/dc3/structsteemit_1_1chain_1_1operation__notification" kindref="compound">operation_notification</ref> &amp;</type>
          <declname>note</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="248" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a32c00aa74e1e34ce55f9e3519740a8ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const void</type>
        <definition>const void steemit::chain::database::push_virtual_operation</definition>
        <argsstring>(const operation &amp;op, bool force=false)</argsstring>
        <name>push_virtual_operation</name>
        <param>
          <type>const operation &amp;</type>
          <declname>op</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>force</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="250" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1ac0136e16f6a04a1c9dc5d1cc9cef92c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::notify_applied_block</definition>
        <argsstring>(const signed_block &amp;block)</argsstring>
        <name>notify_applied_block</name>
        <param>
          <type>const signed_block &amp;</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="251" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1ae55984154e3d95e70d14ee7be7d36223" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::notify_on_pending_transaction</definition>
        <argsstring>(const signed_transaction &amp;tx)</argsstring>
        <name>notify_on_pending_transaction</name>
        <param>
          <type>const signed_transaction &amp;</type>
          <declname>tx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="253" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a7d54a411f50f0033e320738df455afbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::notify_on_applied_transaction</definition>
        <argsstring>(const signed_transaction &amp;tx)</argsstring>
        <name>notify_on_applied_transaction</name>
        <param>
          <type>const signed_transaction &amp;</type>
          <declname>tx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="255" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a8dbea63c584047f0de19a995fb4bcbc4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>account_name_type</type>
        <definition>account_name_type steemit::chain::database::get_scheduled_witness</definition>
        <argsstring>(uint32_t slot_num) const</argsstring>
        <name>get_scheduled_witness</name>
        <param>
          <type>uint32_t</type>
          <declname>slot_num</declname>
        </param>
        <briefdescription>
<para>Get the witness scheduled for block production in a slot. </para>        </briefdescription>
        <detaileddescription>
<para>Emitted After a block has been applied and committed. The callback should not yield and should execute quickly. this signal is emitted any time an object is removed and contains a pointer to the last value of every object that was removed. slot_num always corresponds to a time in the future.</para><para>If slot_num == 1, returns the next scheduled witness. If slot_num == 2, returns the next scheduled witness after 1 block gap.</para><para>Use the <ref refid="da/d98/classsteemit_1_1chain_1_1database_1a5a606aa38adb3db2d7a6fa5b8b2a6fc3" kindref="member">get_slot_time()</ref> and <ref refid="da/d98/classsteemit_1_1chain_1_1database_1a19e37085eb2cbcacdfdc2183689b51e3" kindref="member">get_slot_at_time()</ref> functions to convert between slot_num and timestamp.</para><para>Passing slot_num == 0 returns STEEMIT_NULL_WITNESS </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="312" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a5a606aa38adb3db2d7a6fa5b8b2a6fc3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>fc::time_point_sec</type>
        <definition>fc::time_point_sec steemit::chain::database::get_slot_time</definition>
        <argsstring>(uint32_t slot_num) const</argsstring>
        <name>get_slot_time</name>
        <param>
          <type>uint32_t</type>
          <declname>slot_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the time at which the given slot occurs.</para><para>If slot_num == 0, return time_point_sec().</para><para>If slot_num == N for N &gt; 0, return the Nth next block-interval-aligned time greater than <ref refid="da/d98/classsteemit_1_1chain_1_1database_1a0a192cc9682330fea7abd07efc75c833" kindref="member">head_block_time()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="322" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a19e37085eb2cbcacdfdc2183689b51e3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t steemit::chain::database::get_slot_at_time</definition>
        <argsstring>(fc::time_point_sec when) const</argsstring>
        <name>get_slot_at_time</name>
        <param>
          <type>fc::time_point_sec</type>
          <declname>when</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the last slot which occurs AT or BEFORE the given time.</para><para>The return value is the greatest value N such that get_slot_time( N ) &lt;= when.</para><para>If no such N exists, return 0. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="332" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a8819785dea2038ab05020dca2bd7d36b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; asset, asset &gt;</type>
        <definition>std::pair&lt;asset, asset&gt; steemit::chain::database::create_sbd</definition>
        <argsstring>(const account_object &amp;to_account, asset steem)</argsstring>
        <name>create_sbd</name>
        <param>
          <type>const <ref refid="d1/d66/classsteemit_1_1chain_1_1account__object" kindref="compound">account_object</ref> &amp;</type>
          <declname>to_account</declname>
        </param>
        <param>
          <type>asset</type>
          <declname>steem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the sbd created and deposited to_account, may return STEEM if there is no median feed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="335" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a213e7da48a36afa9ef2ce5f0bd96ab5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>asset</type>
        <definition>asset steemit::chain::database::create_vesting</definition>
        <argsstring>(const account_object &amp;to_account, asset steem)</argsstring>
        <name>create_vesting</name>
        <param>
          <type>const <ref refid="d1/d66/classsteemit_1_1chain_1_1account__object" kindref="compound">account_object</ref> &amp;</type>
          <declname>to_account</declname>
        </param>
        <param>
          <type>asset</type>
          <declname>steem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="337" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1ab41aea989a2dbadffedda411c05a02fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::adjust_total_payout</definition>
        <argsstring>(const comment_object &amp;a, const asset &amp;sbd, const asset &amp;curator_sbd_value)</argsstring>
        <name>adjust_total_payout</name>
        <param>
          <type>const <ref refid="db/d00/classsteemit_1_1chain_1_1comment__object" kindref="compound">comment_object</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const asset &amp;</type>
          <declname>sbd</declname>
        </param>
        <param>
          <type>const asset &amp;</type>
          <declname>curator_sbd_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="339" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a7453555e4526e67a277e006def1aa5f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::update_witness_schedule</definition>
        <argsstring>()</argsstring>
        <name>update_witness_schedule</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="341" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1aa325648d5f46bffc6963cd147def25bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::adjust_liquidity_reward</definition>
        <argsstring>(const account_object &amp;owner, const asset &amp;volume, bool is_bid)</argsstring>
        <name>adjust_liquidity_reward</name>
        <param>
          <type>const <ref refid="d1/d66/classsteemit_1_1chain_1_1account__object" kindref="compound">account_object</ref> &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>const asset &amp;</type>
          <declname>volume</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_bid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="343" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a698ae1af67cd858b665277d8f24b037a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::adjust_balance</definition>
        <argsstring>(const account_object &amp;a, const asset &amp;delta)</argsstring>
        <name>adjust_balance</name>
        <param>
          <type>const <ref refid="d1/d66/classsteemit_1_1chain_1_1account__object" kindref="compound">account_object</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const asset &amp;</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="345" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1aa630106b76c640a46aa5a1ae04c9c1e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::adjust_savings_balance</definition>
        <argsstring>(const account_object &amp;a, const asset &amp;delta)</argsstring>
        <name>adjust_savings_balance</name>
        <param>
          <type>const <ref refid="d1/d66/classsteemit_1_1chain_1_1account__object" kindref="compound">account_object</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const asset &amp;</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="347" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a5efe116c35aa57c8aea386254077de9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::adjust_supply</definition>
        <argsstring>(const asset &amp;delta, bool adjust_vesting=false)</argsstring>
        <name>adjust_supply</name>
        <param>
          <type>const asset &amp;</type>
          <declname>delta</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>adjust_vesting</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="349" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1aba15931dd124632ed42f9ea5324aadec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::adjust_rshares2</definition>
        <argsstring>(const comment_object &amp;comment, fc::uint128_t old_rshares2, fc::uint128_t new_rshares2)</argsstring>
        <name>adjust_rshares2</name>
        <param>
          <type>const <ref refid="db/d00/classsteemit_1_1chain_1_1comment__object" kindref="compound">comment_object</ref> &amp;</type>
          <declname>comment</declname>
        </param>
        <param>
          <type>fc::uint128_t</type>
          <declname>old_rshares2</declname>
        </param>
        <param>
          <type>fc::uint128_t</type>
          <declname>new_rshares2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="351" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a0043151f275f073b9f1e4afc20f24421" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::update_owner_authority</definition>
        <argsstring>(const account_object &amp;account, const authority &amp;owner_authority)</argsstring>
        <name>update_owner_authority</name>
        <param>
          <type>const <ref refid="d1/d66/classsteemit_1_1chain_1_1account__object" kindref="compound">account_object</ref> &amp;</type>
          <declname>account</declname>
        </param>
        <param>
          <type>const authority &amp;</type>
          <declname>owner_authority</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="353" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a6bd7831e116075012e39efc5abb58564" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>asset</type>
        <definition>asset steemit::chain::database::get_balance</definition>
        <argsstring>(const account_object &amp;a, asset_symbol_type symbol) const</argsstring>
        <name>get_balance</name>
        <param>
          <type>const <ref refid="d1/d66/classsteemit_1_1chain_1_1account__object" kindref="compound">account_object</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>asset_symbol_type</type>
          <declname>symbol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="355" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a2a85f0c1e0f0cb1fc63c462b75bc2254" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>asset</type>
        <definition>asset steemit::chain::database::get_savings_balance</definition>
        <argsstring>(const account_object &amp;a, asset_symbol_type symbol) const</argsstring>
        <name>get_savings_balance</name>
        <param>
          <type>const <ref refid="d1/d66/classsteemit_1_1chain_1_1account__object" kindref="compound">account_object</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>asset_symbol_type</type>
          <declname>symbol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="357" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a806ba4203f2bc0e0b227d07a5fb6d373" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>asset</type>
        <definition>asset steemit::chain::database::get_balance</definition>
        <argsstring>(const string &amp;aname, asset_symbol_type symbol) const</argsstring>
        <name>get_balance</name>
        <param>
          <type>const string &amp;</type>
          <declname>aname</declname>
        </param>
        <param>
          <type>asset_symbol_type</type>
          <declname>symbol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="359" column="1" bodyfile="libraries/chain/include/steemit/chain/database.hpp" bodystart="359" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a002cbe3aa9557931eba501c418d4922b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::adjust_proxied_witness_votes</definition>
        <argsstring>(const account_object &amp;a, const std::array&lt; share_type, STEEMIT_MAX_PROXY_RECURSION_DEPTH+1 &gt; &amp;delta, int depth=0)</argsstring>
        <name>adjust_proxied_witness_votes</name>
        <param>
          <type>const <ref refid="d1/d66/classsteemit_1_1chain_1_1account__object" kindref="compound">account_object</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::array&lt; share_type, STEEMIT_MAX_PROXY_RECURSION_DEPTH+1 &gt; &amp;</type>
          <declname>delta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>depth</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>this updates the votes for witnesses as a result of account voting proxy changing </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="364" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a5fe763e3d8230f4c391af65e3c83f436" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::adjust_proxied_witness_votes</definition>
        <argsstring>(const account_object &amp;a, share_type delta, int depth=0)</argsstring>
        <name>adjust_proxied_witness_votes</name>
        <param>
          <type>const <ref refid="d1/d66/classsteemit_1_1chain_1_1account__object" kindref="compound">account_object</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>share_type</type>
          <declname>delta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>depth</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>this updates the votes for all witnesses as a result of account VESTS changing </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="370" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a49e8b92b9f15e1b5d282a6766c8bbcff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::adjust_witness_votes</definition>
        <argsstring>(const account_object &amp;a, share_type delta)</argsstring>
        <name>adjust_witness_votes</name>
        <param>
          <type>const <ref refid="d1/d66/classsteemit_1_1chain_1_1account__object" kindref="compound">account_object</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>share_type</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>this is called by <computeroutput>adjust_proxied_witness_votes</computeroutput> when account proxy to self </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="373" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1af280bfb16a31c9a0c8b47b563a1594ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::adjust_witness_vote</definition>
        <argsstring>(const witness_object &amp;obj, share_type delta)</argsstring>
        <name>adjust_witness_vote</name>
        <param>
          <type>const <ref refid="df/d1f/classsteemit_1_1chain_1_1witness__object" kindref="compound">witness_object</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>share_type</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>this updates the vote of a single witness as a result of a vote being added or removed </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="376" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1af6db379b04933f962e734ff57bd98905" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::clear_witness_votes</definition>
        <argsstring>(const account_object &amp;a)</argsstring>
        <name>clear_witness_votes</name>
        <param>
          <type>const <ref refid="d1/d66/classsteemit_1_1chain_1_1account__object" kindref="compound">account_object</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>clears all vote records for a particular account but does not update the witness vote totals. Vote totals should be updated first via a call to adjust_proxied_witness_votes( a, -a.witness_vote_weight() ) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="382" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a1bbd84a2e57eb061eabd2b2556f99e8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::process_vesting_withdrawals</definition>
        <argsstring>()</argsstring>
        <name>process_vesting_withdrawals</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="384" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1acdb61929e966b2e450d34566f2fa5cd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>share_type</type>
        <definition>share_type steemit::chain::database::pay_discussions</definition>
        <argsstring>(const comment_object &amp;c, share_type max_rewards)</argsstring>
        <name>pay_discussions</name>
        <param>
          <type>const <ref refid="db/d00/classsteemit_1_1chain_1_1comment__object" kindref="compound">comment_object</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>share_type</type>
          <declname>max_rewards</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="386" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a5563a24df953345068cc2f0f336b1a2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>share_type</type>
        <definition>share_type steemit::chain::database::pay_curators</definition>
        <argsstring>(const comment_object &amp;c, share_type max_rewards)</argsstring>
        <name>pay_curators</name>
        <param>
          <type>const <ref refid="db/d00/classsteemit_1_1chain_1_1comment__object" kindref="compound">comment_object</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>share_type</type>
          <declname>max_rewards</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="388" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a29429685c80b421c396300c6ea75a9eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::cashout_comment_helper</definition>
        <argsstring>(const comment_object &amp;comment)</argsstring>
        <name>cashout_comment_helper</name>
        <param>
          <type>const <ref refid="db/d00/classsteemit_1_1chain_1_1comment__object" kindref="compound">comment_object</ref> &amp;</type>
          <declname>comment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="390" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1ab26501ba9e439790185c4b7f26b71bb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::process_comment_cashout</definition>
        <argsstring>()</argsstring>
        <name>process_comment_cashout</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="392" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1ac2991a058e2ec2528ecfae15794e133d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::process_funds</definition>
        <argsstring>()</argsstring>
        <name>process_funds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="394" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a2eb961b83922a0d74697073c692ed627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::process_conversions</definition>
        <argsstring>()</argsstring>
        <name>process_conversions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="396" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1ac8c5eeee4cc5a49d19eb7938f5181c6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::process_savings_withdraws</definition>
        <argsstring>()</argsstring>
        <name>process_savings_withdraws</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="398" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1ac28304f500e2091590f98168ccc68117" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::account_recovery_processing</definition>
        <argsstring>()</argsstring>
        <name>account_recovery_processing</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="400" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a5b1336905b2742edcbddce12be43df11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::expire_escrow_ratification</definition>
        <argsstring>()</argsstring>
        <name>expire_escrow_ratification</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="402" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1acc8a3995f4fb6003cb6207a4b64084d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::process_decline_voting_rights</definition>
        <argsstring>()</argsstring>
        <name>process_decline_voting_rights</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="404" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1af868193cc18477c50057de2a4509a25e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::update_median_feed</definition>
        <argsstring>()</argsstring>
        <name>update_median_feed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="406" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a81567eb4af3580300de5b0c20a75c414" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>share_type</type>
        <definition>share_type steemit::chain::database::claim_rshare_reward</definition>
        <argsstring>(share_type rshares, uint16_t reward_weight, asset max_steem)</argsstring>
        <name>claim_rshare_reward</name>
        <param>
          <type>share_type</type>
          <declname>rshares</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>reward_weight</declname>
        </param>
        <param>
          <type>asset</type>
          <declname>max_steem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="408" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1ab7df798cc705869241dd5c3c16c8eef3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>asset</type>
        <definition>asset steemit::chain::database::get_liquidity_reward</definition>
        <argsstring>() const</argsstring>
        <name>get_liquidity_reward</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="410" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1ad74671fb0d1fbeca343badd18b1eac1d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>asset</type>
        <definition>asset steemit::chain::database::get_content_reward</definition>
        <argsstring>() const</argsstring>
        <name>get_content_reward</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="412" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a9ccaa872bf0ec857463f2f36dde1f2db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>asset</type>
        <definition>asset steemit::chain::database::get_producer_reward</definition>
        <argsstring>()</argsstring>
        <name>get_producer_reward</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="414" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a5b3ab7961130847ed57aa897067c47a7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>asset</type>
        <definition>asset steemit::chain::database::get_curation_reward</definition>
        <argsstring>() const</argsstring>
        <name>get_curation_reward</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="416" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1ae9739fbd1a4c8bbe9d6a36f301fc2ffb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>asset</type>
        <definition>asset steemit::chain::database::get_pow_reward</definition>
        <argsstring>() const</argsstring>
        <name>get_pow_reward</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="418" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a18d025cbf6f7bd98fe48afbacfdcbb68" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t steemit::chain::database::get_discussion_rewards_percent</definition>
        <argsstring>() const</argsstring>
        <name>get_discussion_rewards_percent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="420" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a20b941ac54e3b0ca5d7120d4bc13c081" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t steemit::chain::database::get_curation_rewards_percent</definition>
        <argsstring>() const</argsstring>
        <name>get_curation_rewards_percent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="422" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1ae46c5322d90d77d90cbd234718ee7d84" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint128_t</type>
        <definition>uint128_t steemit::chain::database::get_content_constant_s</definition>
        <argsstring>() const</argsstring>
        <name>get_content_constant_s</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="424" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a260b224cfee0ad8063cf619cb3295fe9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint128_t</type>
        <definition>uint128_t steemit::chain::database::calculate_vshares</definition>
        <argsstring>(uint128_t rshares) const</argsstring>
        <name>calculate_vshares</name>
        <param>
          <type>uint128_t</type>
          <declname>rshares</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="426" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1acba34ec06379e30a8004770326c765be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::pay_liquidity_reward</definition>
        <argsstring>()</argsstring>
        <name>pay_liquidity_reward</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="428" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1aaeec0296d0b0c122b3e0486c9d90d953" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>asset</type>
        <definition>asset steemit::chain::database::to_sbd</definition>
        <argsstring>(const asset &amp;steem) const</argsstring>
        <name>to_sbd</name>
        <param>
          <type>const asset &amp;</type>
          <declname>steem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper method to return the current sbd value of a given amount of STEEM. Return 0 SBD if there isn&apos;t a current_median_history </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="434" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1ae585c14a7f441c4c680210c02c96a991" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>asset</type>
        <definition>asset steemit::chain::database::to_steem</definition>
        <argsstring>(const asset &amp;sbd) const</argsstring>
        <name>to_steem</name>
        <param>
          <type>const asset &amp;</type>
          <declname>sbd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="436" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a0a192cc9682330fea7abd07efc75c833" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>time_point_sec</type>
        <definition>time_point_sec steemit::chain::database::head_block_time</definition>
        <argsstring>() const</argsstring>
        <name>head_block_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="438" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1ae077e15432320689f01480ef8a6faf7e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t steemit::chain::database::head_block_num</definition>
        <argsstring>() const</argsstring>
        <name>head_block_num</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="440" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a709405e904437abba84f862616505e55" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>block_id_type</type>
        <definition>block_id_type steemit::chain::database::head_block_id</definition>
        <argsstring>() const</argsstring>
        <name>head_block_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="442" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1ab7b0038fe73255c450219c65373bcaf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d8/dc6/classsteemit_1_1chain_1_1node__property__object" kindref="compound">node_property_object</ref> &amp;</type>
        <definition>node_property_object&amp; steemit::chain::database::node_properties</definition>
        <argsstring>()</argsstring>
        <name>node_properties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="444" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a449bb88aeba04802bb061c7db2d82887" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t steemit::chain::database::last_non_undoable_block_num</definition>
        <argsstring>() const</argsstring>
        <name>last_non_undoable_block_num</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="446" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1ac62154de0962fcfc22ce19f01a6b844f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::initialize_evaluators</definition>
        <argsstring>()</argsstring>
        <name>initialize_evaluators</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="449" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1ae0ab5803ecc07370782a5b09efbdbc0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::set_custom_operation_interpreter</definition>
        <argsstring>(const std::string &amp;id, std::shared_ptr&lt; custom_operation_interpreter &gt; registry)</argsstring>
        <name>set_custom_operation_interpreter</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="da/d3f/classsteemit_1_1chain_1_1custom__operation__interpreter" kindref="compound">custom_operation_interpreter</ref> &gt;</type>
          <declname>registry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="451" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a64d3c6c6461242c1fb680425c89f4b52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="da/d3f/classsteemit_1_1chain_1_1custom__operation__interpreter" kindref="compound">custom_operation_interpreter</ref> &gt;</type>
        <definition>std::shared_ptr&lt;custom_operation_interpreter&gt; steemit::chain::database::get_custom_json_evaluator</definition>
        <argsstring>(const std::string &amp;id)</argsstring>
        <name>get_custom_json_evaluator</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="453" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a6b814e30c4e8030f7fce582b283fa826" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::initialize_indexes</definition>
        <argsstring>()</argsstring>
        <name>initialize_indexes</name>
        <briefdescription>
<para>Reset the object graph in-memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="456" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a6ef3e52e3108851775356cfec8c2f834" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::init_schema</definition>
        <argsstring>()</argsstring>
        <name>init_schema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="458" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1ac732c411077ee57723652d61dc170d3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::init_genesis</definition>
        <argsstring>(uint64_t initial_supply=STEEMIT_INIT_SUPPLY)</argsstring>
        <name>init_genesis</name>
        <param>
          <type>uint64_t</type>
          <declname>initial_supply</declname>
          <defval>STEEMIT_INIT_SUPPLY</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="460" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a22551bdd48f27d13958488d37f17590c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::validate_transaction</definition>
        <argsstring>(const signed_transaction &amp;trx)</argsstring>
        <name>validate_transaction</name>
        <param>
          <type>const signed_transaction &amp;</type>
          <declname>trx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method validates transactions without adding it to the pending state. <parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>if</parametername>
</parameternamelist>
<parameterdescription>
<para>an error occurs </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="466" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a708f8c07016660c46bad0c4b551f5bc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool steemit::chain::database::apply_order</definition>
        <argsstring>(const limit_order_object &amp;new_order_object)</argsstring>
        <name>apply_order</name>
        <param>
          <type>const <ref refid="d8/d53/classsteemit_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref> &amp;</type>
          <declname>new_order_object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="473" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a232d9bdfdce09f198d24d41a4dc731d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool steemit::chain::database::fill_order</definition>
        <argsstring>(const limit_order_object &amp;order, const asset &amp;pays, const asset &amp;receives)</argsstring>
        <name>fill_order</name>
        <param>
          <type>const <ref refid="d8/d53/classsteemit_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref> &amp;</type>
          <declname>order</declname>
        </param>
        <param>
          <type>const asset &amp;</type>
          <declname>pays</declname>
        </param>
        <param>
          <type>const asset &amp;</type>
          <declname>receives</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="475" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a9ab070e3b2feefc9194ff8416aa8b97c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::cancel_order</definition>
        <argsstring>(const limit_order_object &amp;obj)</argsstring>
        <name>cancel_order</name>
        <param>
          <type>const <ref refid="d8/d53/classsteemit_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="477" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a2d04adfae17c4b95677ed77d4c2ce496" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int steemit::chain::database::match</definition>
        <argsstring>(const limit_order_object &amp;bid, const limit_order_object &amp;ask, const price &amp;trade_price)</argsstring>
        <name>match</name>
        <param>
          <type>const <ref refid="d8/d53/classsteemit_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref> &amp;</type>
          <declname>bid</declname>
        </param>
        <param>
          <type>const <ref refid="d8/d53/classsteemit_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref> &amp;</type>
          <declname>ask</declname>
        </param>
        <param>
          <type>const price &amp;</type>
          <declname>trade_price</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="479" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a63c4f68f54605a7fc00b0adea109c440" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::perform_vesting_share_split</definition>
        <argsstring>(uint32_t magnitude)</argsstring>
        <name>perform_vesting_share_split</name>
        <param>
          <type>uint32_t</type>
          <declname>magnitude</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="481" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a03cfcac7b52d5c8ad02173ddce28a46b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::retally_comment_children</definition>
        <argsstring>()</argsstring>
        <name>retally_comment_children</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="483" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a391718061f7bc908997cd991e9aa23e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::retally_witness_votes</definition>
        <argsstring>()</argsstring>
        <name>retally_witness_votes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="485" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1af2c51f0379754ac9d98f46e0834de15e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::retally_witness_vote_counts</definition>
        <argsstring>(bool force=false)</argsstring>
        <name>retally_witness_vote_counts</name>
        <param>
          <type>bool</type>
          <declname>force</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="487" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1af3a19fbeb4f88e0bccf518866ee2358b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::retally_liquidity_weight</definition>
        <argsstring>()</argsstring>
        <name>retally_liquidity_weight</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="489" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a212bdd7e2bf627554ab0491e36404080" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::update_virtual_supply</definition>
        <argsstring>()</argsstring>
        <name>update_virtual_supply</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="491" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a21e2534ca2b6defcf41bd44c9b0c3347" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool steemit::chain::database::has_hardfork</definition>
        <argsstring>(uint32_t hardfork) const</argsstring>
        <name>has_hardfork</name>
        <param>
          <type>uint32_t</type>
          <declname>hardfork</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="493" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a1b1443e5e1cce5db77b471f38a490313" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::set_hardfork</definition>
        <argsstring>(uint32_t hardfork, bool process_now=true)</argsstring>
        <name>set_hardfork</name>
        <param>
          <type>uint32_t</type>
          <declname>hardfork</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>process_now</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="497" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a8e7b62a2ad2155520b0747e4c64a67db" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::validate_invariants</definition>
        <argsstring>() const</argsstring>
        <name>validate_invariants</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="499" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1af744ee8917ac1bfbb0277e9f71e770de" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; steemit::chain::database::get_json_schema</definition>
        <argsstring>() const</argsstring>
        <name>get_json_schema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="505" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a39c56f16fd4701621661153a2f62d6fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::set_flush_interval</definition>
        <argsstring>(uint32_t flush_blocks)</argsstring>
        <name>set_flush_interval</name>
        <param>
          <type>uint32_t</type>
          <declname>flush_blocks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="507" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a9131b9475bda8d7d3bd30ffcc4d68611" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::notify_changed_objects</definition>
        <argsstring>()</argsstring>
        <name>notify_changed_objects</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="518" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a9faf0e558147853f907bd5901dd8a1c3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::apply_block</definition>
        <argsstring>(const signed_block &amp;next_block, uint32_t skip=skip_nothing)</argsstring>
        <name>apply_block</name>
        <param>
          <type>const signed_block &amp;</type>
          <declname>next_block</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>skip</declname>
          <defval><ref refid="da/d98/classsteemit_1_1chain_1_1database_1afd81b7d9bc2099fda77544ddc53f9dc5addc8b88d20727cbd0fc4a1b37e2cc4ed" kindref="member">skip_nothing</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="523" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a5b2803368a0ccfc1f16bc793f2072565" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::apply_transaction</definition>
        <argsstring>(const signed_transaction &amp;trx, uint32_t skip=skip_nothing)</argsstring>
        <name>apply_transaction</name>
        <param>
          <type>const signed_transaction &amp;</type>
          <declname>trx</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>skip</declname>
          <defval><ref refid="da/d98/classsteemit_1_1chain_1_1database_1afd81b7d9bc2099fda77544ddc53f9dc5addc8b88d20727cbd0fc4a1b37e2cc4ed" kindref="member">skip_nothing</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="525" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a71b47daf3cbd76335000c61e47972ef5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::_apply_block</definition>
        <argsstring>(const signed_block &amp;next_block)</argsstring>
        <name>_apply_block</name>
        <param>
          <type>const signed_block &amp;</type>
          <declname>next_block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="527" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1ade50d5b18432b4aa1540cf25a7e8260c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::_apply_transaction</definition>
        <argsstring>(const signed_transaction &amp;trx)</argsstring>
        <name>_apply_transaction</name>
        <param>
          <type>const signed_transaction &amp;</type>
          <declname>trx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="529" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d98/classsteemit_1_1chain_1_1database_1a4a85ff58a63d20430cf3bf49a574c389" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void steemit::chain::database::apply_operation</definition>
        <argsstring>(const operation &amp;op)</argsstring>
        <name>apply_operation</name>
        <param>
          <type>const operation &amp;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="531" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="da/d98/classsteemit_1_1chain_1_1database_1acf269772febf2e25ec8b59ccbf2c212c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MultiIndexType</type>
          </param>
        </templateparamlist>
        <type>friend void</type>
        <definition>void add_plugin_index</definition>
        <argsstring>(database &amp;db)</argsstring>
        <name>add_plugin_index</name>
        <param>
          <type><ref refid="da/d98/classsteemit_1_1chain_1_1database" kindref="compound">database</ref> &amp;</type>
          <declname>db</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/include/steemit/chain/database.hpp" line="581" column="1" bodyfile="libraries/chain/include/steemit/chain/index.hpp" bodystart="19" bodyend="21"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>tracks the blockchain state in an extensible manner </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="425">
        <label>steemit::chain::database</label>
        <link refid="da/d98/classsteemit_1_1chain_1_1database"/>
        <childnode refid="426" relation="public-inheritance">
        </childnode>
      </node>
      <node id="426">
        <label>chainbase::database</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="427">
        <label>steemit::chain::database</label>
        <link refid="da/d98/classsteemit_1_1chain_1_1database"/>
        <childnode refid="428" relation="public-inheritance">
        </childnode>
      </node>
      <node id="428">
        <label>chainbase::database</label>
      </node>
    </collaborationgraph>
    <location file="libraries/chain/include/steemit/chain/database.hpp" line="41" column="1" bodyfile="libraries/chain/include/steemit/chain/database.hpp" bodystart="41" bodyend="602"/>
    <listofallmembers>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a71b47daf3cbd76335000c61e47972ef5" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>_apply_block</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1ade50d5b18432b4aa1540cf25a7e8260c" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>_apply_transaction</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a549a727b415db4fac063a251f56c7f4a" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>_block_log</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a265fbb90d82e3a88d0004af4095be928" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>_checkpoints</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1aca69e9eb31b5fe27357d30d9a1ccb5ec" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>_current_block_num</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1ab942979aa9c41d3c53dba54e567e7fcd" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>_current_op_in_trx</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1adf68a775b975c6bd98eba28249ff5eec" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>_current_trx_id</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a6baa89fbb408f79bda59883aee6a993e" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>_current_trx_in_block</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1aa9d3d7cf5e655922211e2151f2912c50" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>_current_virtual_op</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a08aaf7bfc767e7fc3b9c48b6447df1a5" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>_custom_operation_interpreters</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1af74bb5a40d1c586650d8a9304167796d" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>_flush_blocks</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1ab57d3b8a316d46001b29ce01113e2592" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>_fork_db</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a7542e46ab8ada662488e6e9e8ffcc93d" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>_generate_block</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a81e7a7dee6ce3c9a1da77f2f57f95b48" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>_hardfork_times</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a0d53ec4bbf95bb4a64f4fd376739e608" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>_hardfork_versions</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a352db2d9e201c3d2d1b90fefafe2d385" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>_is_producing</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a6634b25f2c04e4aefaa38b3dfa8cfef3" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>_json_schema</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1ae8237d2a73c5d7934bf8d45a2265f022" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>_last_free_gb_printed</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a0babbc36ecf340579e9e943cadc52b70" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>_log_hardforks</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a2d5a92192833545800ca7394dcf25d48" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>_my</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a40abc1bb91839c1e0fd83eb239e1eed6" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>_next_flush_block</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1acd8b00b3b4bcaa946b6548ea75ce2b0b" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>_node_property_object</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1aac03b372f5b399eb1d61480738f5bc0c" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>_pending_tx</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1af11106ef56f9476d9fc8c7829bf8778e" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>_pending_tx_session</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a3e5937cb67e18c4f5e0c92018927edfb" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>_plugin_index_signal</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a9bfdf5a578a2c3afb5fbf22ca07594d4" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>_popped_tx</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1aa080ef6f72b1551c39a4308f857ef1d6" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>_push_block</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a00d28386c22fda2f25e6a96b2520353c" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>_push_transaction</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1ac28304f500e2091590f98168ccc68117" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>account_recovery_processing</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a31c8eb2617ed3132ccccbcf540bc1905" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>add_checkpoints</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1acf269772febf2e25ec8b59ccbf2c212c" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>add_plugin_index</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a698ae1af67cd858b665277d8f24b037a" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>adjust_balance</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1aa325648d5f46bffc6963cd147def25bf" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>adjust_liquidity_reward</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a002cbe3aa9557931eba501c418d4922b" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>adjust_proxied_witness_votes</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a5fe763e3d8230f4c391af65e3c83f436" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>adjust_proxied_witness_votes</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1aba15931dd124632ed42f9ea5324aadec" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>adjust_rshares2</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1aa630106b76c640a46aa5a1ae04c9c1e8" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>adjust_savings_balance</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a5efe116c35aa57c8aea386254077de9d" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>adjust_supply</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1ab41aea989a2dbadffedda411c05a02fc" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>adjust_total_payout</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1af280bfb16a31c9a0c8b47b563a1594ed" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>adjust_witness_vote</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a49e8b92b9f15e1b5d282a6766c8bbcff" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>adjust_witness_votes</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a059e744028a5a374a6d4b69d5b8cdecf" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>applied_block</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a9faf0e558147853f907bd5901dd8a1c3" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>apply_block</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1abd4b4f578d33baf8ec341b8ab7471d18" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>apply_hardfork</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a4a85ff58a63d20430cf3bf49a574c389" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>apply_operation</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a708f8c07016660c46bad0c4b551f5bc3" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>apply_order</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a5b2803368a0ccfc1f16bc793f2072565" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>apply_transaction</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1ae3d12a7b74699cb8965bdc2c445548eb" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>before_last_checkpoint</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a3910871659178a4995b0a32dc0366563" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>calculate_discussion_payout_time</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a260b224cfee0ad8063cf619cb3295fe9" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>calculate_vshares</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a9ab070e3b2feefc9194ff8416aa8b97c" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>cancel_order</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a29429685c80b421c396300c6ea75a9eb" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>cashout_comment_helper</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a81567eb4af3580300de5b0c20a75c414" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>claim_rshare_reward</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a6cfb7e5f43a6739ee6b1f311291c5f90" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>clear_expired_orders</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a6f9576dca05246786979bbcee7ef8d8d" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>clear_expired_transactions</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a2da1c132c95d2ebebbe85a73e596ddac" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>clear_null_account_balance</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1aca14282053bde3fe4684eb86f71b9bd4" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>clear_pending</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1af6db379b04933f962e734ff57bd98905" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>clear_witness_votes</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1aa6d1f62572f5eab906cd020a54eee30c" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>close</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1afdf7f3d29a321868da97a6cab8c5b589" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>create_block_summary</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a8819785dea2038ab05020dca2bd7d36b" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>create_sbd</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a213e7da48a36afa9ef2ce5f0bd96ab5d" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>create_vesting</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1aad264eed00502d18178d16aa00e8bedf" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>database</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a5b1336905b2742edcbddce12be43df11" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>expire_escrow_ratification</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1af250ba8ee6f488acf60f7d9ed38dc8ab" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>fetch_block_by_id</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a130ab82259bf9a1b5bc20b640c68b594" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>fetch_block_by_number</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a232d9bdfdce09f198d24d41a4dc731d6" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>fill_order</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1adad55045d5e67a4e08d79d48a506f57d" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>find_account</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1ab9549ce929700c3bcc2e91ab7213a35a" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>find_category</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1ac131e026d3fbb685782274045ae897b9" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>find_comment</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1aa67684290eaa4f294214cd305c926196" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>find_comment</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a3b3a6803fef8a8725f05197f9d1fb5af" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>find_escrow</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a0b59f98fa2aad0e192a1fe579fffd07c" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>find_limit_order</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1ad061b548bc3de5e2c3f55f27c91ebe79" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>find_savings_withdraw</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a3fa77bb08c5bc9069769528bad2c153b" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>find_witness</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a2aecfb0cf4e12bb8e3ea12fb4956a687" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>generate_block</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a11edabc5860513450731278180f40c2f" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>get_account</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a6bd7831e116075012e39efc5abb58564" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>get_balance</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a806ba4203f2bc0e0b227d07a5fb6d373" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>get_balance</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1ad110ef5e563739a07ee5ee0b8f982894" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>get_block_id_for_num</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a4272606e7374a87cb9100d61f4cb4a84" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>get_block_ids_on_fork</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1ab39d0300400f2b282ee7c1b32f7a883f" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>get_category</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a6bb8a172de5c07f3809cb87e8fb264b2" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>get_chain_id</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a0b3754c6c22ca07b91f17eb0b01b6afd" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>get_checkpoints</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a6af12889cdecf38c02c1bbdc57f33de0" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>get_comment</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a4ad26ad7abd4b147844ec9300cc6bf25" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>get_comment</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1ae46c5322d90d77d90cbd234718ee7d84" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>get_content_constant_s</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1ad74671fb0d1fbeca343badd18b1eac1d" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>get_content_reward</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a5b3ab7961130847ed57aa897067c47a7" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>get_curation_reward</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a20b941ac54e3b0ca5d7120d4bc13c081" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>get_curation_rewards_percent</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a64d3c6c6461242c1fb680425c89f4b52" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>get_custom_json_evaluator</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a18d025cbf6f7bd98fe48afbacfdcbb68" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>get_discussion_rewards_percent</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a987074df7a66d6e2b842552d520be094" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>get_dynamic_global_properties</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a20ac3589979dc9678e7f728e07df27e0" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>get_escrow</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a1af2fe51e4ce4654e8ea1bba203890ff" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>get_feed_history</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1abc6216b3554c3f9b8a19851eb4caa32b" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>get_hardfork_property_object</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1af744ee8917ac1bfbb0277e9f71e770de" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>get_json_schema</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a2eb54dc319cd4c5851f1f57f17eba261" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>get_limit_order</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1ab7df798cc705869241dd5c3c16c8eef3" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>get_liquidity_reward</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1ade9b66c970da847d37c7c13110a1458a" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>get_node_properties</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1ae9739fbd1a4c8bbe9d6a36f301fc2ffb" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>get_pow_reward</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a0500612484403bad5b281808349e4e8a" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>get_pow_summary_target</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1aba9c6754db413b6a8c2244ac6e209c08" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>get_pow_target</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a9ccaa872bf0ec857463f2f36dde1f2db" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>get_producer_reward</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a92190284f74a16fc292f317a409fe2e0" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>get_recent_transaction</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a2a85f0c1e0f0cb1fc63c462b75bc2254" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>get_savings_balance</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a05a7e1ca680498f8b6530d8e52dce792" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>get_savings_withdraw</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a8dbea63c584047f0de19a995fb4bcbc4" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>get_scheduled_witness</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a19e37085eb2cbcacdfdc2183689b51e3" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>get_slot_at_time</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a5a606aa38adb3db2d7a6fa5b8b2a6fc3" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>get_slot_time</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1aae3c1fdb3ecac7a751a0734fdada43f1" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>get_witness</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a147236c1a749121a61750d01a85bb309" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>get_witness_schedule_object</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a21e2534ca2b6defcf41bd44c9b0c3347" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>has_hardfork</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a709405e904437abba84f862616505e55" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>head_block_id</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1ae077e15432320689f01480ef8a6faf7e" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>head_block_num</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a0a192cc9682330fea7abd07efc75c833" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>head_block_time</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1ac732c411077ee57723652d61dc170d3c" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>init_genesis</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a40b8beceb2851f8571d36df6c0dd8e0e" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>init_hardforks</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a6ef3e52e3108851775356cfec8c2f834" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>init_schema</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1ac62154de0962fcfc22ce19f01a6b844f" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>initialize_evaluators</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a6b814e30c4e8030f7fce582b283fa826" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>initialize_indexes</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1ae2909bd1dd2a60cefb0b2e0573a6af70" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>is_known_block</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1aa87f33e618e662f391e179a76953fd42" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>is_known_transaction</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a2ab154304dd7d4df555c5f254d5a127b" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>is_producing</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a449bb88aeba04802bb061c7db2d82887" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>last_non_undoable_block_num</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a2d04adfae17c4b95677ed77d4c2ce496" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>match</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1abcf06d6a3a80bc8a07e569d20654a2f2" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>max_bandwidth_per_share</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1ab7b0038fe73255c450219c65373bcaf3" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>node_properties</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1ac0136e16f6a04a1c9dc5d1cc9cef92c4" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>notify_applied_block</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a9131b9475bda8d7d3bd30ffcc4d68611" prot="protected" virt="non-virtual"><scope>steemit::chain::database</scope><name>notify_changed_objects</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a7d54a411f50f0033e320738df455afbb" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>notify_on_applied_transaction</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1ae55984154e3d95e70d14ee7be7d36223" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>notify_on_pending_transaction</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1ad1c64bcf5fbe3b6c3f80118c50a6acc3" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>notify_post_apply_operation</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a373a523fd0217e9a323b07208b7b3518" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>notify_pre_apply_operation</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a818e534a70f1ea5ead316c9f2afa0e66" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>old_update_account_bandwidth</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1aa4fd5ff1155becf2ebffcfdf3a913ada" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>on_applied_transaction</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a94e065706bd38d368b7de8146e8a4631" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>on_pending_transaction</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a3fdaaea8d9ceb603f1ec705f73396c52" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>open</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a5563a24df953345068cc2f0f336b1a2c" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>pay_curators</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1acdb61929e966b2e450d34566f2fa5cd8" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>pay_discussions</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1aa1356102392d15b9af14a1caedb672eb" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>pay_fee</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1acba34ec06379e30a8004770326c765be" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>pay_liquidity_reward</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a63c4f68f54605a7fc00b0adea109c440" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>perform_vesting_share_split</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a777ad723ebbe127746551aa6078ff5f0" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>pop_block</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a039b8a0a2b75db3129ce432d441eeb31" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>post_apply_operation</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a85a3dc43ff531e8e334ef074e9dc5089" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>pre_apply_operation</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1ab26501ba9e439790185c4b7f26b71bb6" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>process_comment_cashout</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a2eb961b83922a0d74697073c692ed627" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>process_conversions</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1acc8a3995f4fb6003cb6207a4b64084d6" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>process_decline_voting_rights</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1ac2991a058e2ec2528ecfae15794e133d" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>process_funds</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1aff5b8842e71b82e08b80ff2548da9dfb" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>process_hardforks</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1ab9d8178e20a6e7807b09713b360d39e1" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>process_header_extensions</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1ac8c5eeee4cc5a49d19eb7938f5181c6e" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>process_savings_withdraws</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a1bbd84a2e57eb061eabd2b2556f99e8e" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>process_vesting_withdrawals</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a4e4c5992d4118e747d31b8adfa4ccfb6" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>push_block</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a7812e370b029b1babfe9490462c710aa" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>push_transaction</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a32c00aa74e1e34ce55f9e3519740a8ef" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>push_virtual_operation</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1aac49873d8a2f8076af3e5c0df9804296" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>reindex</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a12820999830e98e6d33512ad7fb1eeba" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>reset_virtual_schedule_time</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a03cfcac7b52d5c8ad02173ddce28a46b" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>retally_comment_children</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1af3a19fbeb4f88e0bccf518866ee2358b" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>retally_liquidity_weight</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1af2c51f0379754ac9d98f46e0834de15e" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>retally_witness_vote_counts</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a391718061f7bc908997cd991e9aa23e8" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>retally_witness_votes</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1ae0ab5803ecc07370782a5b09efbdbc0e" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>set_custom_operation_interpreter</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a39c56f16fd4701621661153a2f62d6fa" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>set_flush_interval</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a1b1443e5e1cce5db77b471f38a490313" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>set_hardfork</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a2ef002c6d8b293fbfdede6a385fd32fc" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>set_producing</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1afd81b7d9bc2099fda77544ddc53f9dc5af43114f997f739cf7d36cdc11425370a" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>skip_authority_check</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1afd81b7d9bc2099fda77544ddc53f9dc5a84ecb7dbb0c219502560178e52be8b0d" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>skip_block_log</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1afd81b7d9bc2099fda77544ddc53f9dc5a9680a557f45656d22f1de36a08ffb201" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>skip_block_size_check</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1afd81b7d9bc2099fda77544ddc53f9dc5a3943acc8542ee90a6e1d8893c7cb8e1d" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>skip_fork_db</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1afd81b7d9bc2099fda77544ddc53f9dc5a464d089d26016a084aa94016cb8a0161" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>skip_merkle_check</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1afd81b7d9bc2099fda77544ddc53f9dc5addc8b88d20727cbd0fc4a1b37e2cc4ed" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>skip_nothing</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1afd81b7d9bc2099fda77544ddc53f9dc5aed920890cb793e0511e74aa644999afb" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>skip_tapos_check</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1afd81b7d9bc2099fda77544ddc53f9dc5a7bb2199e0feae1adbe0727d9a19f9189" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>skip_transaction_dupe_check</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1afd81b7d9bc2099fda77544ddc53f9dc5a25ee59e2966d45e3c4a6e2c2c6775302" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>skip_transaction_signatures</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1afd81b7d9bc2099fda77544ddc53f9dc5aff4a39e99af7ceb85a500b7de0638c4b" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>skip_undo_block</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1afd81b7d9bc2099fda77544ddc53f9dc5aad7dc26984e6b37067e6f9673540f8b5" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>skip_undo_history_check</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1afd81b7d9bc2099fda77544ddc53f9dc5a05af17d74e216172fab4d6b8f4ee950b" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>skip_validate</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1afd81b7d9bc2099fda77544ddc53f9dc5ae5f4e5e8033c60c3cb84dd1fd5e4ae89" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>skip_validate_invariants</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1afd81b7d9bc2099fda77544ddc53f9dc5ac8c77097fb5f7c8dae2f93afe52a3946" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>skip_witness_schedule_check</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1afd81b7d9bc2099fda77544ddc53f9dc5add5f3dde5faa4b2b43305b115eb0c999" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>skip_witness_signature</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1aaeec0296d0b0c122b3e0486c9d90d953" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>to_sbd</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1ae585c14a7f441c4c680210c02c96a991" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>to_steem</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a98654bbd6a665e52f0ea72a85da3e025" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>update_account_bandwidth</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a42cbc0442c977d113349ee05c0e3614a" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>update_global_dynamic_data</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a2ab764a4b992053ebd4c2565c08021f3" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>update_last_irreversible_block</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1af868193cc18477c50057de2a4509a25e" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>update_median_feed</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1aca532e44fcdeb5817960245ee8fb606a" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>update_median_witness_props</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a0043151f275f073b9f1e4afc20f24421" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>update_owner_authority</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1acbe5917294280b663ba4fdeea10da079" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>update_signing_witness</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a212bdd7e2bf627554ab0491e36404080" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>update_virtual_supply</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a7453555e4526e67a277e006def1aa5f6" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>update_witness_schedule</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a8290a53133701ef9e97fce734922c24e" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>update_witness_schedule4</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a296b58f65eb4bd90ab5d7a9cdba34a09" prot="private" virt="non-virtual"><scope>steemit::chain::database</scope><name>validate_block_header</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a8e7b62a2ad2155520b0747e4c64a67db" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>validate_invariants</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a22551bdd48f27d13958488d37f17590c" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>validate_transaction</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1afd81b7d9bc2099fda77544ddc53f9dc5" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>validation_steps</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1a309123bdc667d25d101e3e11c2054519" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>wipe</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1aaa9f9037e428e4ac881879aeeb139fe9" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>witness_participation_rate</name></member>
      <member refid="da/d98/classsteemit_1_1chain_1_1database_1ac9178c25f2f9b9ae7ade5e34da25befd" prot="public" virt="non-virtual"><scope>steemit::chain::database</scope><name>~database</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
